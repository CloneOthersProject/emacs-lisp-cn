@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2001,
@c   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
@c   Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@setfilename ../../info/numbers
@node 数字, 字符串与字符, Lisp数据类型, Top
@comment  node-name,  next,  previous,  up
@chapter 数字
@cindex 整数
@cindex 数字

    GNU Emacs支持两类数类型：@dfn{整数}和@dfn{浮点数}。整数是那些如@minus{}3，0,7,13和511这样的数字，
它们的值是精确的。浮点数是那些具有分数部分的数字，如@minus{}4.5，0.0或2.71828。它们也可以用指数记法进行表
示：1.5e2与150相等；在这个例子中，@samp{e2}代表10的2次方，并乘以1.5。浮点数并不精确，它们具有固定有限的精
度。

@menu
* 整数基础::     表示以及整数范围。
* 浮点数基础::   表示以及浮点数范围。
* 数字判定::     数字测试。
* 数字比较::     相等性或不等性判定。
* 数字转换::     浮点数与整数相互转换。
* 算术操作::     如何加、减、乘除。
* 舍入操作::     显式舍入浮点数。
* 位操作::       逻辑与、或、移位。
* 数学函数::     三角运算、指数或对数运算。
* 随机数::       生成随机数，是否伪随机数。
@end menu

@node 整数基础
@comment  node-name,  next,  previous,  up
@section 整数基础

    整数的范围取决于机器。最小范围是@minus{}536870912到536870911（30位；即
@ifnottex
-2**29
@end ifnottex
@tex
@math{-2^{29}}
@end tex
to
@ifnottex
2**29 - 1），
@end ifnottex
@tex
@math{2^{29}-1}），
@end tex
但是某些机器可以提供更宽的范围。本节的许多例子假定整数具有30位。
@cindex 溢出

    Lisp读取器以包含可选的初始符号以及可选的结束句点的数字序列形式来读取整数。

@example
 1               ; @r{整数1。}
 1.              ; @r{整数1.}
+1               ; @r{同样是整数1。}
-1               ; @r{整数@minus{}1。}
 1073741825      ; @r{因为溢出了，同样是整数1。}
 0               ; @r{整数0。}
-0               ; @r{整数0。}
@end example

@cindex 指定基数的整数
@cindex 读取整数时的基数
@cindex 读取整数时的基数
@cindex 十六进制数
@cindex 八进制数
@cindex 以十六进制、八进制以及二进制的方式读取数字
    不以10为基数的整数语法使用@samp{#}跟上一个表示基数的字母进行表示：@samp{b}表示二进制，
@samp{o}表示八进制，@samp{x}表示十六进制，或以@samp{@var{radix}r}指定特定的基数@var{radix}。
指定基数的字母不区分大小写。因此@samp{#b@var{integer}}以二进制形式读取@var{integer}，而
@samp{#@var{radix}r@var{integer}}读取以@var{radix}为底读取@var{integer}。@var{radix}允许的
值为2到36。例如：

@example
#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44
@end example

    为更好的理解操作整数的函数，特别是位操作（参考本节@pxref{位操作}一节），通常以二进制形式表达更为方便。

    在30位的整数中，十进制数5看起来是这样：

@example
00 0000  0000 0000  0000 0000  0000 0101
@end example

@noindent
（我们在4位间插入空格，并在8位间插入2个空格，以便二进制数清晰易读。）

    整数@minus{}1看起来像是这样：

@example
11 1111  1111 1111  1111 1111  1111 1111
@end example

@noindent
@cindex 2的反码
@minus{}1以30位表示（这称为@dfn{2的反码}记法。）

    负整数，@minus{}5，可以由@minus{}1减4得到。在二进制中，十进制整数4是100。因此
@minus{5}看起来像这样：

@example
11 1111  1111 1111  1111 1111  1111 1011
@end example

    在这种实现中，最大的30位二进制数用十进制表示是536,870,911。在二进制中，它看起来是这样：

@example
01 1111  1111 1111  1111 1111  1111 1111
@end example

    由于算术运算并不检查整数是否越界，因此当你对536,870,911加1时，它的值是负整数@minus{}536,870,912：

@example
(+ 1 536870911)
     @result{} -536870912
     @result{} 10 0000  0000 0000  0000 0000  0000 0000
@end example

    本章描述的大部分函数都接受代替数字参数的标记参数。（请参考@xref{Markers}.）由于这些参数的实际参数既
可以是数字，也可以是标记，我们将这些参数命名为@var{number-or-marker}。当参数的值是标记时，它的位置值将
被使用，并忽略它所属的缓冲区。

@defvar most-positive-fixnum
此变量的值代表Emacs Lisp可以处理的最大整数。
@end defvar

@defvar most-negative-fixnum
此变量的值代表Emacs Lisp可以处理的最小整数，它是负数。
@end defvar

    欲了解有效字符码点的最大值，请参考@xref{Character Codes, max-char}.一节。

@node 浮点数基础
@section 浮点数基础

    浮点数适用于表示那些非整数的数字。浮点数精度与机器相关；它与你所用机器上的C语言的@code{double}类型精度
一致。

    浮点数的读取语法要求或者是一个十进制小数点（后面至少有一个数字），或者是一个指数，或者两者兼有。例如，
@samp{1500.0}，@samp{15e2}，@samp{15.0e2}，@samp{1.5e3}以及@samp{.15e4}是用来表示浮点数1500的五
种方法。它们是等价的。你可利用负号来表示表示负的浮点数，如@samp{-1.0}。

@cindex @acronym{IEEE}浮点数
@cindex 正无穷
@cindex 负无穷
@cindex 无穷
@cindex NaN
    大多数当代计算机支持@acronym{IEEE}浮点数标准，它提供了以浮点数形式表示的正无穷和负无穷。它还提供了一类名叫
NaN或``not-a-number''的一类数值；数值函数在它们无法知道正确答案时将返回这类数值。例如，@code{(/ 0.0 0.0)}返
回一个NaN。从实用的角度讲，Emacs Lisp中不同的NaN值并没有明显的区别，并且没有明确的规则来限定特定情况下应当返回
哪一个NaN值，所以Emacs Lisp不再尝试去区分它们（但它却报告符号位，如果你打印它的话）。以下是这样特殊浮点数的读取语
法：

@table @asis
@item 正无穷
@samp{1.0e+INF}
@item 负无穷
@samp{-1.0e+INF}
@item Not-a-number 
@samp{0.0e+NaN} 或 @samp{-0.0e+NaN}.
@end table

    为测试一个浮点数是否是NaN，可以将它与自身用@code{=}进行比较。如果它是NaN，则返回@code{nil}，如果它是
其他的浮点数，则返回@code{t}。

    在@acronym{IEEE}浮点数中，@code{-0.0}区别于普通的0，但Emacs Lisp@code{equal}以及@code{=}却将它
们视为相等的值。

    你可以用@code{logb}提取浮点数的指数部分（或用来估计整数的对数）。

@defun logb number
此函数返回@var{number}以2为底的批数部分。更精确的说，这个值是以2为底@var{number}的对数，向下舍入成一个整
数。

@example
(logb 10)
     @result{} 3
(logb 10.0e20)
     @result{} 69
@end example
@end defun

@defvar float-e
数学常量@math{e}（2.71828@dots{}）。
@end defvar

@defvar float-pi
数学常量@math{pi}（3.14159@dots{}）。
@end defvar

@node 数字判定
@section 数字判定
@cindex 数字判定

    本节的函数用来测试数字，或测试某一类的数字。函数@code{integerp}以及@code{floatp}可以接受
任意Lisp对象作为参数（否则它们不会这么常用），但@code{zerop}判定则要求以数字做为它的参数。也可以
参考@ref{Predicates on Markers}.一节的@code{integer-or-marker-p}以及@code{number-or-marker-p}。

@defun floatp object
此判定测试它的参数是否是一个浮点数，如是则返回@code{t}，否则返回@code{nil}。

@code{floatp}在Emacs版本18以及之前的版本中并不存在。
@end defun

@defun integerp object
此判定测试其参数是否是一个整数，如是则返回@code{t}，否则返回@code{nil}。
@end defun

@defun numberp object
此判定测试其参数是否是一个数字（或是整数，或是浮点数），如是则返回@code{t}，否则返回@code{nil}。
@end defun

@defun wholenump object
@cindex 自然数
@code{wholenump}判定（其名字来源于``whole-number-p''）测试其参数是否是一个非负整数，如是则返回
@code{t}，否则返回@code{nil}。0被认为是非负数。

@findex natnump
@code{natump}是@code{wholenump}的一个旧的同义判定。
@end defun

@defun zerop number
此判定测试其参数是否是0，如是则返回@code{t}，否则返回@code{nil}。它的参数必须是数字。
译注：如果注意上面对于浮点数的描述，我们可知@code{(zerop 0.0)}返回@code{t}，这是因为Emacs Lisp
认为浮点数0.0与整数0相等。

@code{(zerop x)}等价于@code{(= x 0)}.
@end defun

@node 数字比较
@section 数字比较
@cindex 数字比较
@cindex 数字比较

    为测试数字的数值相等性，你通常应当使用@code{=}而非@code{eq}。有很多具有相同数值但不同的浮点数对象，
如果你使用@code{eq}来比较它们，那么实际上你在比较它们是不是相同的对象。相比之下，@code{=}只比较对象的数
值。
译注：可以测试一下@code{(eq 10.0e1 100.0)}的结果为@code{nil}，而@code{(= 10.0e1 100.0)}的结果为@code{t}。

    当前，每个整数在Emacs Lisp中都有一个唯一的对象。因此在比较整数时@code{eq}与@code{=}是等价的。有时候使用
@code{eq}来将一个未知值和整数相比显得比较方便，这是因为在这个未知值不是数字时，@code{eq}并不报错。相比之下，@code{=}
在参数不是数字或标记时，将产生一个错误。然而，尽可能使用@code{=}去比较数字是一个好主意，以防我们在Emacs将来的版本中更
改数字的表示。

    有时@code{equal}在比较数字很有用；它在两个数字的类型以及数值相等时才认为两个数字相等。相比之下，@code{=}则可能认为
整数和浮点数相等。
    译注：可以测试一下@code{(equal 0.0 0) (= 0.0 0)}的区别。请参考@xref{相等判定}.

    这里有另外一妙计；由于浮点数的算术运算并不准确，因此有时候检查两个浮点数是否相等是一个坏主意。通常测试它们的约等性
更好。下面是实现这种方式的一个函数：

@example
(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (and (= x 0) (= y 0))
      (< (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))
@end example

@cindex Common Lisp注记---整数和@code{eq}
@quotation
@b{Common Lisp 注记:} 在Common Lisp中比较数字总是要求使用@code{=}，因为Common Lisp实现了多字整数，两个不同的整数对象可以
具有相同的数字值。Emacs Lisp对于一个指定的值只能一个整数对象，因此具有有限的数字空间。
@end quotation


@defun = number-or-marker1 number-or-marker2
此函数测试其参数是否在数值上相等，如是则返回@code{t}，否则返回@code{nil}。
@end defun

@defun eql value1 value2
除了当两个参数都是数字外，此函数与@code{eq}行为相似。当两个参数都是数字时，它比较它们的
类型和值，因此@code{eql 1.0 1}返回@code{nil}，而@code{(eql 1.0 1.0)}以及@code{(eql 1 1)}则返回@code{t}。
@end defun

@defun /= number-or-marker1 number-or-marker2
此函数测试其参数是否在数值上相等，如是则返回@code{t}，否则返回@code{nil}。
@end defun

@defun <  number-or-marker1 number-or-marker2
此函数测试其第一个参数是否严格小于第二个参数，如是则返回@code{t}，否则返回@code{ni}。
@end defun

@defun <=  number-or-marker1 number-or-marker2
此函数测试其第一个参数是否小于等于第二个参数，如是则返回@code{t}，否则返回@code{ni}。
@end defun

@defun >  number-or-marker1 number-or-marker2
此函数测试其第一个参数是否严格大于第二个参数，如是则返回@code{t}，否则返回@code{ni}。
@end defun

@defun >=  number-or-marker1 number-or-marker2
此函数测试其第一个参数是否大于等于第二个参数，如是则返回@code{t}，否则返回@code{ni}。
@end defun

@defun max number-or-marker &rest numbers-or-markers
此函数返回其参数中的最大参数，如果任一参数是浮点数，则返回值是浮点数，即使传参数时此参数为整数。

@example
(max 20)
     @result{} 20
(max 1 2.5)
     @result{} 2.5
(max 1 3 2.5)
     @result{} 3.0
@end example
@end defun

@defun min number-or-marker &rest numbers-or-markers
此函数返回其参数中的最小参数，如果任一参数是浮点数，则返回值是浮点数，即使传参数时此参数为整数。

@example
(min -4 1)
     @result{} -4
@end example
@end defun

@defun abs number
此函数返回@var{number}的绝对值。
@end defun

@node 数字转换
@section 数字转换
@cindex 转换中的舍入
@cindex 数字转换
@cindex 数字转换

为将整数转换为浮点数，使用函数@code{float}。

@defun float number
此函数将@var{number}转换为浮点数。
如果@var{number}已经是一个浮点数，@code{float}不作改变地返回它。
@end defun

有四个用于将浮点数转换为整数的函数，它们的区别在于舍入方式不同。它们都接受一个参数@var{number}，以及一个
可选的参数@var{divisor}。两个参数可以是整数或浮点数。@var{divisor}也可以是@code{nil}。如果@var{divisor}是
@code{nil}或被忽略，这些函数将@var{number}转换至整数，或在其本身已经是整数的情况下不作改变地返回它。如果
@var{divisor}非@code{nil}，它们将@var{number}除以@var{divisor}并将结果转换为整数。如果@var{divisor}为0，
则产生@code{arith-error}错误。

@defun truncate number &optional divisor
此函数返回@var{number}转换为整数并向0舍入的结果。

@example
(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1
@end example
@end defun

@defun floor number &optional divisor
此函数返回@var{number}转换为整数并下（即向负无穷）舍入的结果。

如果指定了@var{divisor}，那么就使用对应于@code{mod}方式的除法，向下舍入。

@example
(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1
@end example
@end defun

@defun ceiling number &optional divisor
此函数返回@var{number}转换为整数并向上（即向正无穷）舍入的结果。

@example
(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1
@end example
@end defun

@defun round number &optional divisor
此函数返回@var{number}转换为整数并向最近的整数舍入的结果。对两个等距的整数做舍入时，可能选取更近于0的整数，
或选取偶数整数，这取决于你的机器。

@example
(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2
@end example
@end defun

@node 算术操作
@section 算术操作
@cindex 算术操作

    Emacs Lisp提供了传统的四个算术操作：加、减、乘、除。取余函数和取模函数做为除法函数的补充。由于加1和减1函数在Lisp
中频繁使用，且是Lisp的传统函数，故也被提供。

    所有这些函数在参数是浮点数时，都返回浮点数，@code{%}除外。

    需要重点强调的是，在Emacs Lisp中，算术函数并不检查溢出。因此@code{(1+ 268435455)}将被求值为@minus{}268435456，
这取决于你的机器（译注：前面已经提到，不同的机器，整数范围不一）。

@defun 1+ number-or-marker
此函数返回@var{number-or-marker}加1的结果。例如：

@example
(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5
@end example

此函数不同于C操作符@code{++}，它并不增加变量的值。它只是求和，因此，如果我们继续，

@example
foo
     @result{} 4
@end example

如果你想增加变量的值，你必须使用@code{setq}，像这样：

@example
(setq foo (1+ foo))
     @result{} 5
@end example
@end defun

@defun 1- number-or-marker
此函数返回@var{number-or-marker}减1的结果。
@end defun

@defun + &rest numbers-or-markers
此函数将其参数加在一起。它没有指定参数时，此函数返加0。

@example
(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10
@end example
@end defun

@defun - &optional number-or-marker &rest more-numbers-or-markers
@code{-}函数有两个作用：求反和相减。当其只有一个参数时，其返回值是参数求反后的结果。当其有多个参数时，
它累积地从@var{number-or-marker}减去@var{more-numbers-or-markers}中的每一个参数。如果没有参数
指定时，结果是0。

@example
(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0
@end example
@end defun

@defun * &rest numbers-or-markers
此函数返回其参数相乘在一起的结果。如果没有参数，结果是1。

@example
(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24
@end example
@end defun

@defun / dividend divisor &rest divisors
此函数返回@var{dividend}除以@var{divisor}的商。如果附加参数@var{divisors}存在，那么它
将依次除以每一个除数。每个参数可以是数字或标记。

如果所有参数都是整数，那么结果也是一个整数。这意味着结果可能需要被舍入。在大多数机器上，结果在每个除法
完成后向0舍入。这时因为Lisp的@code{/}函数用C语言的除法操作符来实现，考虑到实用上的因素，所有已知机型
都按标准方式进行舍入（译注：这里的标准应该就是指这种向0舍入）。

@cindex 除法中的@code{arith-error}
如果你将整数除以0，将产生一个@code{arith-error}错误。（请参考@xref{Errors}.）浮点数除以0或返回无穷，
或在你机器支持@acronym{IEEE}浮点数时返回NaN，否则它将产生一个@code{arith-error}错误。

@example
@group
(/ 6 2)
     @result{} 3
@end group
(/ 5 2)
     @result{} 2
(/ 5.0 2)
     @result{} 2.5
(/ 5 2.0)
     @result{} 2.5
(/ 5.0 2.0)
     @result{} 2.5
(/ 25 3 2)
     @result{} 4
@group
(/ -17 6)
     @result{} -2   @r{(理论上在某些机器上有可能是@minus{}3)}
@end group
@end example
@end defun

@defun % dividend divisor
@cindex 余数
此函数返回@var{dividend}除以@var{divisor}后的整数余数。其参数必须是整数或标记。

对于负参数，由于商是机器相关的，因此其余数原则上是机器相关的；但实际上，所有已知机器行为相同。

除果@var{divisor}是0，则产生一个@code{arith-error}错误。

@example
(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1
@end example

对于任意的两个整数@var{dividend}和@var{divisor}，

@example
@group
(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))
@end group
@end example

@noindent
总是等于@var{dividend}。
@end defun

@defun mod dividend divisor
@cindex 模数
此函数返回@var{dividend}以@var{divisor}求模的结果；换句话说，即@var{dividend}除以@var{divisor}的余数，但
其结果的符号与@var{divisor}相同。两个参数必须是数字或标记。

如果@var{divisor}为0,则产生一个@code{arith-error}错误。

@example
@group
(mod 9 4)
     @result{} 1
@end group
@group
(mod -9 4)
     @result{} 3
@end group
@group
(mod 9 -4)
     @result{} -3
@end group
@group
(mod -9 -4)
     @result{} -1
@end group
@group
(mod 5.5 2.5)
     @result{} .5
@end group
@end example

对于任意两个数字@var{dividend}和@var{divisor}，

@example
@group
(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))
@end group
@end example

@noindent
总是等于@var{dividend}，如果有一个参数为浮点数时，将产生舍入错误。关于@code{floor}，请参考@ref{数字转换}。
（译注：这里的“如果有一个参数为浮点数时”，将产生舍入错误，在我的Emacs 23.3.1上并不产生舍入错误，这可能是旧版本上的限制）
@end defun

@node 舍入操作
@section 舍入操作
@cindex 无转换的舍入操作

函数@code{ffloor}、@code{fceiling}、@code{fround}以及@code{ftruncate}接受一个浮点数参数并返回一个整数附近的浮点数。
@code{ffloor}返回下面最接近的整数转换后的浮点数；@code{fceiling}返回上面最接近的整数转换后的浮点数；@code{ftruncate}
则返回朝向0方式的最近整数转换后的浮点数；@code{fround}则返回最近的整数转换后的浮点数。

@defun ffloor float
此函数对@var{float}向更低的最近整数进行舍入，并以浮点数形式返回该整数的值。
@end defun

@defun fceiling float
此函数对@var{float}向更高的最近整数进行舍入，并以浮点数形式返回该整数的值。
@end defun

@defun ftruncate float
此函数对@var{float}向0方向的最近整数进行舍入，并以浮点数形式返回该整数的值。
@end defun

@defun fround float
此函数对@var{float}向最近的整数进行舍入，并以浮点数形式返回该整数的值。
@end defun

@node 位操作
@section 整数位操作
@cindex 算术位操作
@cindex 逻辑位操作

    在计算机中，整数被表示成一个二进制数，即一个由@dfn{位}（数字或是0,或是1）组成的序列。
位操作作用于这种序列的单个位。例如，@dfn{移位}将整个序列向左或向右移动一个或多个位置，呈现
出整个序列被移动的情形。

    Emacs Lisp中的位操作只应用于整数。

@defun lsh integer1 count
@cindex 逻辑移位
@code{lsh}，其是@dfn{逻辑移位}的一个简称，它将@var{integer1}中的位向左侧移动@var{count}个位置，
或在@var{count}是负数的情况下向右移动@var{count}（译注：需要对@var{count}求绝对值）个位置，对于
腾出的空位，则用0填充。如果@var{count}是负值，@code{lsh}将向左侧有效位上移入0，使得@var{integer1}
是负值的情况下产生正值。对比于下面的@code{ash}，

以下是@code{lsh}的两个例子，将一系列的位向左移。我们将只显示二进制式样的低8位，其余全是0。

@example
@group
(lsh 5 1)
     @result{} 10
;; @r{十进制的5变成了10。}
00000101 @result{} 00001010

(lsh 7 1)
     @result{} 14
;; @r{十进制的7变成了14。}
00000111 @result{} 00001110
@end group
@end example

@noindent
像上面的例子所演示的那样，对于位的偏移将生产一个是原来数字2倍的数字。

向左侧移2位产生的结果如下（以8位二进制数为例）：

@example
@group
(lsh 3 2)
     @result{} 12
;; @r{十进制的3变成了12。}
00000011 @result{} 00001100
@end group
@end example

另一方面，向右移位如下：

@example
@group
(lsh 6 -1)
     @result{} 3
;; @r{十进制的6变成了3。}
00000110 @result{} 00000011
@end group

@group
(lsh 5 -1)
     @result{} 2
;; @r{十进制的5变成了2.}
00000101 @result{} 00000010
@end group
@end example

@noindent
像上面的例子演示的那样，向右移1位等于将正整数除以2，并向下做舍入。

函数@code{lsn}，像其他的Emacs Lisp算术操作函数那样，并不检查溢出，所以向左移位将丢失符号位并改变数字的
符号。例如，在30-bit机器上将536,870,911向左移将产生@minus{}2。

@example
(lsh 536870911 1)          ; @r{左移1位}
     @result{} -2
@end example

在二进制上，用30位的实现，参数的样子如下：

@example
@group
;; @r{十进制536,870,911}
01 1111  1111 1111  1111 1111  1111 1111
@end group
@end example

@noindent
向左移时将变成下面这样：

@example
@group
;; @r{Decimal @minus{}2}
11 1111  1111 1111  1111 1111  1111 1110
@end group
@end example
@end defun

@defun ash integer1 count
@cindex 算术移位
@code{ash}（@dfn{算术移位}）将@var{integer1}中的位向左移@var{count}个位置，在@var{count}是负值的情况下
向右移@var{count}（译注：需要对@var{count}求绝对值）个位置。

除了@var{integer1}和@var{count}都是负数时，@code{ash}与@code{lsh}产生相同的结果。在两个参数都是负数的情况下，
@code{ash}在左侧空位上填充1,而@code{lsh}则填充0。

因此，对于@code{ash}，向右移1位如下：

@example
@group
(ash -6 -1) @result{} -3
;; @r{十进制的@minus{}6变成了十进制的@minus{}3。}
11 1111  1111 1111  1111 1111  1111 1010
     @result{}
11 1111  1111 1111  1111 1111  1111 1101
@end group
@end example

相比之下，向右移1位如下：

@example
@group
(lsh -6 -1) @result{} 536870909
;; @r{十进制的@minus{}6变成了536807909}
11 1111  1111 1111  1111 1111  1111 1010
     @result{}
01 1111  1111 1111  1111 1111  1111 1101
@end group
@end example

以下是其他例子：

@c !!! Check if lined up in smallbook format!  XDVI shows problem
@c     with smallbook but not with regular book! --rjc 16mar92
@smallexample
@group
                   ;  @r{             30位的二进制数}

(lsh 5 2)          ;   5  =  @r{00 0000  0000 0000  0000 0000  0000 0101}
     @result{} 20         ;      =  @r{00 0000  0000 0000  0000 0000  0001 0100}
@end group
@group
(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{11 1111  1111 1111  1111 1111  1111 1011}
     @result{} -20        ;      =  @r{11 1111  1111 1111  1111 1111  1110 1100}
(ash -5 2)
     @result{} -20
@end group
@group
(lsh 5 -2)         ;   5  =  @r{00 0000  0000 0000  0000 0000  0000 0101}
     @result{} 1          ;      =  @r{00 0000  0000 0000  0000 0000  0000 0001}
@end group
@group
(ash 5 -2)
     @result{} 1
@end group
@group
(lsh -5 -2)        ;  -5  =  @r{11 1111  1111 1111  1111 1111  1111 1011}
     @result{} 268435454  ;      =  @r{00 0111  1111 1111  1111 1111  1111 1110}
@end group
@group
(ash -5 -2)        ;  -5  =  @r{11 1111  1111 1111  1111 1111  1111 1011}
     @result{} -2         ;      =  @r{11 1111  1111 1111  1111 1111  1111 1110}
@end group
@end smallexample
@end defun

@defun logand &rest ints-or-markers
此函数返回参数``逻辑与''的结果：第@var{n}位当且仅当所有参数的第@var{n}位都被设置时被设置。
（``设置''表示该位的值为1而不是0。）

例如，对于4位的二进制数，13和12的``逻辑与''的结果是12：1101与1100组合成1100。在两个二进制数，最左
侧两位都被设置（即它们都是1）,所以返回值的最左侧两位被设置。然而，对于右侧的两位，两个参数中至少有一个
是0，因此返回值的最右侧两位都是0。

@noindent
因此，

@example
@group
(logand 13 12)
     @result{} 12
@end group
@end example

如果未向@code{logand}传递任何参数，则其返回@minus{}1。此数是@code{logand}的一个身份元素，因为它的二进制表示是全1。
如果仅向@code{logand}传递一个参数，它返回该参数。

@smallexample
@group
                   ; @r{               30位二进制数}

(logand 14 13)     ; 14  =  @r{00 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{00 0000  0000 0000  0000 0000  0000 1101}
     @result{} 12         ; 12  =  @r{00 0000  0000 0000  0000 0000  0000 1100}
@end group

@group
(logand 14 13 4)   ; 14  =  @r{00 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{00 0000  0000 0000  0000 0000  0000 1101}
                   ;  4  =  @r{00 0000  0000 0000  0000 0000  0000 0100}
     @result{} 4          ;  4  =  @r{00 0000  0000 0000  0000 0000  0000 0100}
@end group

@group
(logand)
     @result{} -1         ; -1  =  @r{11 1111  1111 1111  1111 1111  1111 1111}
@end group
@end smallexample
@end defun

@defun logior &rest ints-or-markers
此函数返回各参数``或''的结果：第@var{n}位当且仅当至少有一个参数的第@var{n}位被设置。如果没有参数
传入，结果为0，即此操作的身份元素。如果仅向@code{logior}传递一个参数，它返回该参数。
p
@smallexample
@group
                   ; @r{              30位二进制数}

(logior 12 5)      ; 12  =  @r{00 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{00 0000  0000 0000  0000 0000  0000 0101}
     @result{} 13         ; 13  =  @r{00 0000  0000 0000  0000 0000  0000 1101}
@end group

@group
(logior 12 5 7)    ; 12  =  @r{00 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{00 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{00 0000  0000 0000  0000 0000  0000 0111}
     @result{} 15         ; 15  =  @r{00 0000  0000 0000  0000 0000  0000 1111}
@end group
@end smallexample
@end defun

@defun logxor &rest ints-or-markers
此函数返回各参数``异或''的结果：：第@var{n}位当且仅当有奇数个参数的第@var{n}位被设置。如果没有参数
传入，结果为0，即此操作的身份元素。如果仅向@code{logior}传递一个参数，它返回该参数。

@smallexample
@group
                   ; @r{              30位二进制数}

(logxor 12 5)      ; 12  =  @r{00 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{00 0000  0000 0000  0000 0000  0000 0101}
     @result{} 9          ;  9  =  @r{00 0000  0000 0000  0000 0000  0000 1001}
@end group

@group
(logxor 12 5 7)    ; 12  =  @r{00 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{00 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{00 0000  0000 0000  0000 0000  0000 0111}
     @result{} 14         ; 14  =  @r{00 0000  0000 0000  0000 0000  0000 1110}
@end group
@end smallexample
@end defun

@defun lognot integer
此函数返回其参数的逻辑补码：第@var{n}位在该参数的第@var{n}位是0时是1，反之是0。

@example
(lognot 5)
     @result{} -6
;;  5  =  @r{00 0000  0000 0000  0000 0000  0000 0101}
;; @r{becomes}
;; -6  =  @r{11 1111  1111 1111  1111 1111  1111 1010}
@end example
@end defun

@node 数学函数
@section 标准数学函数
@cindex 超越函数
@cindex 数学函数
@cindex 浮点数函数

    下面的这些函数接受整数或浮点数作为参数。 

@defun sin arg
@defunx cos arg
@defunx tan arg
这些函数是普通的三解函数，其参数以弧度计量。
@end defun

@defun asin arg
@code{(asin @var{arg})}的结果是一个介于
@ifnottex
@minus{}pi/2
@end ifnottex
@tex
@math{-\pi/2}
@end tex
and
@ifnottex
pi/2
@end ifnottex
@tex
@math{\pi/2}
@end tex
（包含边界）的值，其正弦是@var{arg}；如果@var{arg}超出范围（即超出[@minus{}1, 1]），它将产生@code{domain-error}错误。
@end defun

@defun acos arg
@code{(acos @var{arg})}是值是一个介于0与
@ifnottex
pi
@end ifnottex
@tex
@math{\pi}
@end tex
（包含边界）的值，其余弦是@var{arg}；如果@var{arg}超出范围（即超出[@minus{}1, 1]），它将产生@code{domain-error}错误。
@end defun

@defun atan y &optional x
@code{(atan @var{y})}的值是一个介于
@ifnottex
@minus{}pi/2
@end ifnottex
@tex
@math{-\pi/2}
@end tex
and
@ifnottex
pi/2
@end ifnottex
@tex
@math{\pi/2}
@end tex
(不包含边界)的值，其正切是@var{y}。如果指定了第二个可选参数@var{x}，@code{(atan @var{y})}是一个以弦度表示的角度，它介于
@code{[@var{x}, @var{y}]}与@code{X}轴之间。
@end defun

@defun exp arg
这是指数函数，它返回
@tex
@math{e}
@end tex
@ifnottex
@i{e}
@end ifnottex
的@var{arg}次幂。
@tex
@math{e}
@end tex
@ifnottex
@i{e}
@end ifnottex
是一个基础数学常量，它也被称为是自然对数的底。
@end defun

@defun log arg &optional base
此函数返回以@var{base}为底@var{arg}的对数。如果不指定@var{base}，则底使用
@tex
@math{e}
@end tex
@ifnottex
@i{e}
@end ifnottex
。如果@var{arg}是负数，它将产生@code{domain-error}错误。
@end defun

@c 这里被忽略了，所以也不再翻译了

@ignore
@defun expm1 arg
This function returns @code{(1- (exp @var{arg}))}, but it is more
accurate than that when @var{arg} is negative and @code{(exp @var{arg})}
is close to 1.
@end defun

@defun log1p arg
This function returns @code{(log (1+ @var{arg}))}, but it is more
accurate than that when @var{arg} is so small that adding 1 to it would
lose accuracy.
@end defun
@end ignore

@defun log10 arg
此函数返回以10为底@var{arg}的对数。如果@var{arg}是负数，它将产生@code{domain-error}错误。
近似地说，@code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}。
@end defun

@defun expt x y
此函数返回@var{x}的@var{y}次幂。如果两个参数都是整数，并且@var{y}是整数，结果也是一个整数；
在这种情况下，溢出将导致截断，因此请注意。
@end defun

@defun sqrt arg
此函数返回@var{arg}的平方根。如果@var{arg}是负值，它将产生@code{domain-error}错误。
@end defun

@node 随机数
@section 随机数
@cindex 随机数

    确定性计算机不可能产生真正的随机数。大多数情况下，@dfn{伪随机数}已经足够使用。一系列的随机数以确定
性的方式被生成。这些数字并不真正的随机，但它们具有某些特性可以用来模拟随机序列。例如，在伪随机数序列中，
所有可能的值以相同的频率出现。
（译注：关于确定性计算机与不确定性计算机的说明，从网络上摘了以下文档，可供理解：
LinkedIn上的原文：There are at present no non-deterministic computers,all our current ones are deterministic,
although a few can "mimic" non-deterministic reasoning.There is research on quantum computing 
that should lead to a non-deterministic computer, but it is still some way from producing a 
working prototype. 
翻译：当前并没有不确定性计算机，所有当前的计算机都是确定性的，尽管少量可“模仿”非确定性推理。而对于量子计算的研究应该
可以导致不确性计算机的产生，但目前离可用的原型还有一定距离。
根据最近我所看到的一篇文章，美国已经有公司在卖量子计算机了，所以也许非确定性计算机可能已经出现了）

    在Emacs中，伪随机数从一个``种子''数字生成。从一个给定的种子，@code{random}函数总是产生相同序列的数字。Emacs总是从同一个
种子数值开始，所以@code{random}产生的序列在每次Emacs运算时实际上是相同的！例如，在一个操作系统上，对于@code{(random)}的调用
总是返回@minus{}1457731，而第二次调用总是返回@minus{}7692030。这种重复性在调试时很有帮助。

    如果你想随机数不总以相同方式出现，那么执行@code{(random t)}。这将基于当前时间和Emacs进程@acronym{ID}编程重新选取一个
种子。

@defun random &optional limit
此函数返回一个伪随机数。重新调用可产生一系列的伪随机数。

如果@var{limit}是一个正值，则生成的随机数为非负且小于@var{limit}。

如果@var{limit}是@code{t}，这意味着要基于当前时间和Emacs进程@acronym{ID}编程重新选取一个
种子。

@c "Emacs'" is incorrect usage!
在某些机器上，任何Lisp可表示的整数都可能是@code{random}有结果。在其他某些机器上，结果可能总不大于某个特定的最大值或小于某个特定（负数）的最小值。
@end defun

@ignore
   arch-tag: 574e8dd2-d513-4616-9844-c9a27869782e
@end ignore
