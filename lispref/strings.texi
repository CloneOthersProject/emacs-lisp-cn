
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2001,
@c   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
@c   Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@setfilename ../../info/strings
@node 字符串与字符, 列表, 数字, Top
@comment  node-name,  next,  previous,  up
@chapter 字符串与字符
@cindex 字符串
@cindex 字符数组
@cindex 字符串
@cindex 字节

  Emacs Lisp中的字符串是一个包含有序字符序列的数组。字符串用于符号、缓冲区以及文件的命名；用于向用户发送消息；用于持有在缓冲区间
拷贝的文本以及许多其他目的。由于字符如此重要，Emacs Lisp特意提供了许多用于操作它们的函数。相比于单个字符，Emacs Lisp程序使用字
符串更频繁一些。

  对于包含键盘字符事件的字符串的特殊考虑，请参考@xref{Strings of Events}.一节。

@menu
* 基础: 字符串基础.             字符串和字符的基础属性。
* 字符串判定::                  测试对象是否是字符串或字符。
* 创建字符串::                  用于分配字符串的函数。
* 修改字符串::                  替换即有字符串的内容。
* 文本比较::                    字符或字符串比较。
* 字符串转换::                  从字符串或字符中转入转出。
* 格式化字符串::                @code{format}：Emacs与@code{printf}相似的函数。
* 大小写转换::                 大小写转换函数。
* 大小写表::                   定制大小写转换。
@end menu

@node 字符串基础
@section 字符串和字符基础

  Emacs Lisp中以整数表示字符；整数是否是字符由其使用方式决定。因此，字符串实际上包含的是整数。关于Emacs中字符表示的详细内容，请
参考@xref{Character Codes}.一节。

  字符串（象其他任何数组一样）的长度是固定的，一旦字符串存在就不能被改变（译注：不能改变其长度）。Lisp中的字符串@emph{不}被特殊
的字符码终结。（相比之下，C语言中的字符串由@acronym{ASCII}码0终结。）

  由于字符串是数组，因而它也是序列，你可以使用通用的字符串和序列函数操作它们。（请参考@xref{Sequences Arrays Vectors}.）例如，
你可以使用@code{aref}和@code{aset}访问或改变字符串中的单个字符（请参考@pxref{Array Functions}）。

  在Emacs字符串（以及在缓冲区中）非@acronym{ASCII}字符有两种文本表示：单字节或多字节（请参考@pxref{Text
Representations}）。在大多数Lisp编程过程中，你不需要关注这两种表示形式。

  有时按键序列以单字节字符串形式存储。当单字节字符串是一个按键序列时，在128至255之间的字符串元素是元字符（它们是较大的整数），而
非在128至255之间的普通字符编码。字符串不能持有hyper、super或alt修饰符，它们可以持有@acronym{ASCII}控制字符，但不能持有其他的
控制字符，并且它们不区分@acronym{ASCII}控制字符的大小写。如果你想在一个序列中存储这些字符（译注：指yper、super或alt修饰符），
例如按键序列，你必须使用容器而非字符串存储它们。要了解关于键盘输入字符的更多内容，请参考@xref{字符类型}.一节。

  字符串适用于在存储正则表达式。你还可以对字符串使用@code{string-match}匹配正则表达式（请参考@pxref{Regexp Search}）。
函数@code{match-string}（请参考@pxref{Simple Match Data}）以及@code{replace-match}（请参考@pxref{Replacing Match}）
适用于对用正则表达式匹配过的字符串进行分解和修改。

  像缓冲区一样，字符串可以持有针对于其存储字符的字符属性，就像它存储字符一样。请参考@xref{Text Properties}.。所有从字符串向缓冲
区或其他字缓串拷贝文本的Lisp原子函数同样会拷贝字符串的属性。

  关于显示字符串以及向缓冲区中拷贝字符串的信息，@xref{Text}.一节。关于字符串以及字符的语法信息，@xref{字符类型}.以及@ref{字符串类型}.。
关于文本转换函数以及字符码的编码解码函数，@xref{Non-ASCII Characters}.一节。

@node 字符串判定
@section 字符串判定

  关于序列以及数组的通用判定的更多信息，请参考@ref{Sequences Arrays Vectors}.以及@ref{Arrays}.。

@defun stringp object
此函数在@var{object}是字符串时返回@code{t}，否则返回@code{nil}。
@end defun

@defun string-or-null-p object
此函数在@var{object}是字符串或是@code{nil}时返回@code{t}，否则返回@code{nil}。
@end defun

@defun char-or-string-p object
此函数在@var{object}是字符串或是字符时时返回@code{t}，否则返回@code{nil}。
@end defun

@node 创建字符串
@section 创建字符串

  下面的函数创建字符串，或直接创建，或合并字符串，或拆开字符串。

@defun make-string count character
此函数返回由@var{count}个重复@var{character}字符构成的字符串。如果@var{count}是负数，将会产生
一个错误。

@example
(make-string 5 ?x)
     @result{} "xxxxx"
(make-string 0 ?x)
     @result{} ""
@end example

  与之相比的函数包括@code{make-vector}（请参考@pxref{Vectors}）以及@code{make-list}（请参考@pxref{构造列表}）。
@end defun

@defun string &rest characters
此函数返回由@var{characters}（译注：Emacs Lisp中，&rest后的参数将被构造成一个表）表中字符组成的字符串。

@example
(string ?a ?b ?c)
     @result{} "abc"
@end example
@end defun

@defun substring string start &optional end
此函数返回一个新的字符串，该字符串包含那些从@var{string}字符串中指定范围内提取出的字符，该范围从@var{start}开始，包括
@var{start}对应字符，至@var{end}结束，但不包括@var{end}对应字符。第一个字符以0索引。

@example
@group
(substring "abcdefg" 0 3)
     @result{} "abc"
@end group
@end example

@noindent
在上一个例子中，@samp{a}的索引是0，@samp{b}的索引是1，而@samp{c}的索引是2。字符串中第四个字符的索引3，标识了子字符串
拷贝的终点。因此，@samp{abc}从字符串@code{"abcdefg"}中被拷贝出来。

负数从字符串末尾开始计数，因此@minus{}1标识字符串的最后一个字符（译注：-1标明子串应当结束在最后一个字符，但不包含该字符
）。例如：

@example
@group
(substring "abcdefg" -3 -1)
     @result{} "ef"
@end group
@end example

@noindent
在这个例子中，@samp{e}的索引是@minus{}3，而@samp{f}的索引是@minus{}2，而@samp{g}的索引是@minus{}1。因此，@samp{e}
和@samp{f}被包含，而@samp{g}则被排除。

当@code{nil}被用于@var{end}时，它代表字符串的长度。因此：

@example
@group
(substring "abcdefg" -3 nil)
     @result{} "efg"
@end group
@end example

忽略参数@var{end}等待同于将其指定为@code{nil}。因而@code{(substring @var{string} 0)}返回包含@code{string}所有内容
的一个拷贝。

@example
@group
(substring "abcdefg" 0)
     @result{} "abcdefg"
@end group
@end example

@noindent

但对于这个目的（译注：指复制字符串），我们推荐@code{copy-sequence}。（参考@pxref{Sequence Functions}）

如果从@var{string}拷贝的字符具有文本属性，则该属性也将被拷贝至新的字符串中。参考@xref{Text Properties}.。

@code{substring}同样也接受以容器作为其第一个参数。
如：

@example
(substring [a b (c) "d"] 1 3)
     @result{} [b (c)]
@end example

当@var{start}不是一个整数，或@var{end}即不是整数也不是@code{nil}时，将产生一个@code{wrong-type-argument}错误。
而当@var{start}标识一个在@var{end}对应字符之后的字符，或两个索引都超出了@var{string}的范围时，将产生一个
@code{args-out-of-range}错误。

对比@code{buffer-substring}函数（参考@pxref{Buffer Contents}），该函数返回包含当前缓冲区中一定范围内文本的字符串，。
字符串以索引0开始，而缓冲则以索引1开始。
@end defun

@defun substring-no-properties string &optional start end
此函数与@code{substring}相似，但丢弃所有文本属性。同样地，@var{start}可以被忽略，或指定为与之等价的@code{nil}。
因此@w{@code{(substring-no-properties @var{string})}}返回@var{string}的一个拷贝，但所有文本属性被移除。
@end defun

@defun concat &rest sequences
@cindex 拷贝字符串
@cindex 连接字符串
此函数返回由其参数中指定的字符构成的字符串（包括它们的文本属性）。参数可以是字符串，数字列表，数字容器。它们本身不会被
改变。如果未向@code{concat}传递参数，它返回一个空字符串。

@example
(concat "abc" "-def")
     @result{} "abc-def"
(concat "abc" (list 120 121) [122])
     @result{} "abcxyz"
;; @r{@code{nil}是一个空序列。}
(concat "abc" nil "-def")
     @result{} "abc-def"
(concat "The " "quick brown " "fox.")
     @result{} "The quick brown fox."
(concat)
     @result{} ""
@end example

@noindent
此函数永远返回与任何即有字符串@code{eq}的新字符串（译注：@code{eq}表示两个待比参数是同一Lisp对象），除非结果是一个
空字符串（为了节省空间，Emacs只创建一个空的多字节字符串）。

关于其他连接函数的信息，请参考@ref{Mapping Functions}一节中的@code{mapconcat}及@ref{构造列表}一节
中@code{vconcat}的介绍。关于将独立的命令行参数连接成一个供shell命令使用的字符串，请参考@ref{Shell Arguments,
combine-and-quote-strings}。
@end defun

@defun split-string string &optional separators omit-nulls
此函数将字符串@var{string}基于正则表达式@var{separators}（请参考@pxref{Regular Expressions}）分割成子字符
串。每一个对于@var{separators}的匹配定义了一个分割点；分割点间的子字符串被构造成一个列表作为返回值返回。

如果@var{omit-nulls}是@code{nil}（或忽略），此函数将在存在针对@var{seperators}两个连接的匹配时，或者匹配
与@var{string}字符串的起始或终结相邻时，返回包含空字符串的结果。如果@var{omit-nulls}是@code{t}，则空字符串将
被忽略。

如果@var{seperators}是@code{nil}（或忽略），其默认值将是@code{split-string-default-separators}。

作为特例，当@var{separators}是@code{nil}（或忽略），空字符串将总被结果所忽略。

@example
(split-string "  two words ")
     @result{} ("two" "words")
@end example

其结果并非@code{("" "two" "words" "")}这种非常少用的形式，如果你需要这种结果，请显式指定@var{separators}：

@example
(split-string "  two words "
              split-string-default-separators)
     @result{} ("" "two" "words" "")
@end example

更多例子：

@example
(split-string "Soup is good food" "o")
     @result{} ("S" "up is g" "" "d f" "" "d")
(split-string "Soup is good food" "o" t)
     @result{} ("S" "up is g" "d f" "d")
(split-string "Soup is good food" "o+")
     @result{} ("S" "up is g" "d f" "d")
@end example

除了@code{split-string}不会关注在使用非空匹配（译注：注意，在下面的第一个例子中，"o*"这个正则表达式实际支持空匹配，
因而即使到了字符串结尾，也会根据前面的规则增加一个""字符串）匹配到的字符串结尾、或@var{string}是空字符串时的
空匹配结果之外，空匹配结果也需被纳入函数结果。

@example
(split-string "aooob" "o*")
     @result{} ("" "a" "" "b" "")
(split-string "ooaboo" "o*")
     @result{} ("" "" "a" "b" "")
(split-string "" "")
     @result{} ("")
@end example

然而，当@var{seperators}可以匹配空字符串时，@var{omit-nulls}通常为@code{t}，因而上面三个例子的细微差别显得
不那么重要。

@example
(split-string "Soup is good food" "o*" t)
     @result{} ("S" "u" "p" " " "i" "s" " " "g" "d" " " "f" "d")
(split-string "Nice doggy!" "" t)
     @result{} ("N" "i" "c" "e" " " "d" "o" "g" "g" "y" "!")
(split-string "" "" t)
     @result{} nil
@end example

有些奇怪，但是可以预见出来，对于@var{separators}的某些``非贪心''值（如下面的例子中，"\\|o+"这个正则表达式
，显然空字符串为``非贪心值''），将会产生相比非空匹配优选空匹配的行为。
再次说明，这些值在实际应用中很少出现：

@example
(split-string "ooo" "o*" t)
     @result{} nil
(split-string "ooo" "\\|o+" t)
     @result{} ("o" "o" "o")
@end example

如果你需要将一个字符串分解成一个适合@code{call-process}或@code{start-process}使用的独立命令行参数，
请参考@ref{Shell Arguments, combine-and-quote-strings}。
@end defun

@defvar split-string-default-separators
针对于@code{split-string}的@var{separators}参数的默认值。它的值通常是@w{@code{"[ \f\t\n\r\v]+"}}。
@end defvar

@node 修改字符串
@section 修改字符串

  替换即有字符串内容的基本方式就是使用@code{aset}（请参考@pxref{Array Functions}）。@code{(aset @var{string} 
@var{index} @var{char})}将@var{char}存入@var{string}@var{idx}索引的位置上。每一个字符占用一个或多个字节，并且
如果@var{char}需要与该索引上即有字符不同的字节数时，@code{aset}产生一个错误。

  更强大的一个函数是@code{store-substring}：

@defun store-substring string idx obj
此函数用@var{obj}替换字符串@var{string}中以@var{idx}起始的部分内容。@var{obj}既可以是字符，也可以是一个（小的）字符串。

由于即有字符串的长度不能更改，因而在@var{obj}不在@var{string}的实际长度内时，或者在任何一个新字符要求比原字符串中对应字符
更多的字节时，将产生一个错误。
@end defun

  为清除一个包含密码的字符串时，使用
@code{clear-string}:

@defun clear-string string
此函数将使得@var{string}成为单字节字符串，并清空其每个字符为0，它还有可能改变@var{string}的长度。（译注：理论上说字符串
长度不可更改，但从理论上说，这里的改动是合法的，因为如原字符串是单字节的，则转换出的单字节等长，而如原字符串是多字节的，转换
成稍小的单字节字符串也不会有什么问题。）
@end defun

@need 2000
@node 文本比较
@section 字符串比较
@cindex 字符串相等性

@defun char-equal character1 character2
此函数在两个参数是相同的字符时返回@code{t}，否则返回@code{nil}。如果@code{case-fold-search}变量是非@code{nil}，则
忽略参数的大小写。

@example
(char-equal ?x ?x)
     @result{} t
(let ((case-fold-search nil))
  (char-equal ?x ?X))
     @result{} nil
@end example
@end defun

@defun string= string1 string2
此函数在两个字符串的字符精确匹配时返回@code{t}。符号也即可做为参数，在这种情况下，它们的打印命字将被使用。
不管@code{case-fold-search}变量的值，大小写永远都有意义。

@example
(string= "abc" "abc")
     @result{} t
(string= "abc" "ABC")
     @result{} nil
(string= "ab" "ABC")
     @result{} nil
(setq abc 2)
(string= 'abc "abc")
     @result{} t
@end example

（译注：上面最后的例子由我添加，用以说明符号在做为参数时的结果）
@code{string=}函数忽略两个字符串的文本属性。当@code{equal}（@pxref{相等判定}）比较两个字符串时，它就
使用@code{string=}。

基于技术上的原因，一个单字节和多字节字符串在当且仅当它们包含相同序列的字符，并且所有字符码或介于0至127（@acronym{ASCII}）
或介于160至255（@code{eight-bit-graphic}）时是@code{equal}的。然而，当单字节字符串被转换为多字节字符串时，所有在
160至2555区间的字符码将被转换成更高的编码，而@acronym{ASCII}字符保持不变。因此，一个单字节字符串与其转换后的多字节字
符串仅在该字符串的所有字符都是@acronym{ASCII}字符时是@code{euqal}的。介于160至255之间的字符码并不全适合于多字节文
本，尽管它们可能出现。因此，那些单字节字符串和多字节字符串都包含不全是@acronym{ASCII}字符但是@code{equal}的情况，
是一个少数Emacs Lisp程序员曾经遇到的技术上的怪异现象。（请参考@xref{Text Representations}.）
@end defun

@defun string-equal string1 string2
@code{string-equal}是@code{string=}的另一个名字。
@end defun

@cindex 字典比较
@defun string< string1 string2
@c (findex string< causes problems for permuted index!!)
此函数同时比较两个字符串的同一个字符。它同时扫描两个字符串来找到第一个对应的不匹配字符。如果更小的字符来自@var{string1}，
则@var{string1}更小，这时此函数将返回@code{t}。如果更小的字符来自于@var{string2}，则@var{string1}较大，此函数返回
@code{nil}。如果两个字符串完全匹配，结果为@code{nil}。

字符对的比较基于它们的字符码，请记住@acronym{ASCII}字符集中的小写字符比大写字符具有更高的数值。数字和许多标识符号与大写
字符相比具有更小的数值。@acronym{ASCII}字符比任何非@acronym{ASCII}字符都小；单字节的非@acronym{ASCII}字符永远比
多字节的非@acronym{ASCII}字符小。（请参考@pxref{Text Representations}）

@example
@group
(string< "abc" "abd")
     @result{} t
(string< "abd" "abc")
     @result{} nil
(string< "123" "abc")
     @result{} t
@end group
@end example

当两个字符串具有不同的长度时，如果匹配到@var{string1}的长度，则结果是@code{t}。如果匹配到@var{string2}的长度，则
结果是@code{nil}。空字符串比任何其他字符串都小。

@example
@group
(string< "" "abc")
     @result{} t
(string< "ab" "abc")
     @result{} t
(string< "abc" "")
     @result{} nil
(string< "abc" "ab")
     @result{} nil
(string< "" "")
     @result{} nil
@end group
@end example

符号也可以作为参数，此时它们的打印名被使用。
@end defun

@defun string-lessp string1 string2
@code{string-lessp}是@code{string<}的另一个名字。
@end defun

@defun compare-strings string1 start1 end1 string2 start2 end2 &optional ignore-case
此函数比较@var{string1}指定部分与@var{string2}指定部分。@var{sting1}的指定部分自@var{start1}开始，
至@var{end1}结束（@code{nil}表示字符串末尾）。对于@var{string2}相似。

两个字符串将都被转换为多字节字符串（请参考@pxref{Text Representations}），以便单字节字符串以及其转换成的
多字节字符串总被认为是相等的（译注：原文为：The strings are both converted to multibyte for the comparison
(@pxref{Text Representations}) so that a unibyte string and its
conversion to multibyte are always regarded as equal.  有些不太理解，感觉应该是保证如单字节时相等，则转换为
多字节也相等，故暂翻译字面意思，待后续修改）。如果@var{ignore-case}是非@code{nil}，则大小写被忽略，因此大写字母
可以与小写字符相等。

如果两个字符串的指定部分相等，返回值是@code{t}。否则，返回值是一个标识多少前置字符相等，以及哪个字符串更小。它的
绝对值等待于两个字符串相等的开始位置加1。如果@var{string1}（或其指定部分）更小，则符号为负值。
@end defun

@defun assoc-string key alist &optional case-fold
除了@var{key}必须是一个字符串或符号，并且使用@code{compare-strings}完成比较之外，此函数与@code{assoc}类似。
符号在测试前被转换为字符串。如果@var{case-fold}是非@code{nil}，它将忽略大小写差异。不像@code{assoc}，此函数
还比较属性列表中那些是字符串或符号的元素，而非cons。特别地，@var{alist}可以是一个由字符串和符号构成的列表，而非
一个真正的属性列表。
@xref{关联列表}.
@end defun

  请一并参考@ref{Comparing Text}中的@code{compare-buffer-substrings}函数，该函数用于比较缓冲区中的文本。
用于针对字符串匹配一个正则表达式的函数@code{string-match}，可以用于某一种字符串比较，请参考@ref{Regexp Search}。

@node 字符串转换
@comment  node-name,  next,  previous,  up
@section 字符与字符串转换
@cindex 字符串转换

   此节描述用于用于换转字符、字符串以及整数的函数。@code{format}（@pxref{格式化字符串}）以及@code{prin1-to-string}
（@pxref{Output Functions}）也可用来将Lisp对象转换为字符串。@code{read-from-string}（@pxref{Input Functions}）可以将
Lisp对象的的字符串表示``转换''为对象。函数@code{string-make-multibyte}以及@code{string-make-unibyte}转换字符串的文字表达。
（@pxref{Converting Representations}）。

  关于产生文本字符的文本描述以及常规输入事件(@code{single-key-description})以及@code{text-char-description}函数的说明，
@xref{Documentation}.，这些函数主要用于创建帮助信息。

@defun number-to-string number
@cindex 整数转为字符串
@cindex 整数转为十进制
此函数由@var{number}对应的十进制表示构成的字符串，它可以是一个整数或者浮点数。如果参数是负数，则返回值由负号开始。

@example
(number-to-string 256)
     @result{} "256"
@group
(number-to-string -23)
     @result{} "-23"
@end group
(number-to-string -23.5)
     @result{} "-23.5"
@end example

@cindex int-to-string
@code{int-to-string}是此函数的一个半废弃的别名。

还可以参考@ref{格式化字符串}中的@code{format}函数。
@end defun

@defun string-to-number string &optional base
@cindex 字符串至数字
此函数返回@var{string}中的字符对应的数值。如果@var{base}非@code{nil}，它必须是一个2至16的整数（包含2与16自身），
整数转换将以该数为基数。如果@var{base}是@code{nil}，则转换至以十为基数的整数。浮点数转换只能以10为基础；我们还未
实现以其他数为基数的浮点数转换，它需要更多的工作，并且看起来并没有什么用。如果@var{string}看起来像一个整数，但其值
超出Lisp整数的限制，则@code{string-to-number}返回一个浮点数。

分析过程将跳过@var{string}开始处的空格与制表符，然后开始尽可能多地读取数字，只要该数字符合指定基数。（在某些系统上，
它忽略其他空白字符，不仅仅是空格与制表符。）如果忽略掉空白字符之后的第一个字符即不符合指定基数，又不是一个正号或负号，
还不是一个浮点数的前置点号，则此函数返回0。

@example
(string-to-number "256")
     @result{} 256
(string-to-number "25 is a perfect square.")
     @result{} 25
(string-to-number "X256")
     @result{} 0
(string-to-number "-4.5")
     @result{} -4.5
(string-to-number "1e5")
     @result{} 100000.0
@end example

@findex string-to-int
@code{string-to-int}是此函数的一个废弃的别名。
@end defun

@defun char-to-string character
@cindex 字符转换成字符串
此函数返回一个包含一个@var{character}所示字符的新的字符串。此函数已经半废弃，因为@code{string}更为通用。
@xref{创建字符串}.。
@end defun

@defun string-to-char string
  此函数返回@var{string}中的第一个字符。它基本上等同于@code{(aref string 0)}，除了它在字符串为空时返回
0以外。（译注：对于空字符串，如果用aref取第0个元素，将产生一个错误）（当@var{string}的第一个字符是null字符，
即@acronym{ASCII}编码0时也返回0。）此函数将来有可能被除去，如果它的用处显得不足以被保留。
@end defun

  以下是一些其他可用于向字符串转换或从字符串转换的函数：

@table @code
@item concat
此函数将一个容器或列表转换成一个字符串。
@xref{创建字符串}.

@item vconcat
此函数将一个字符串转换为一个容器。@xref{Vector Functions}.。

@item append
此函数将一个字符串转换为一个列表。@xref{构造列表}.。
（译注：当只向append传递一个字符串参数时，你将不会得到一个列表，而仍得到该字符串，关于这个现象，在Emacs IRC上
得到pjb的指点，原因如下：
append builds a list, and the tail of that list is its last argument. If the last argument is not a list, 
you get a dotted list.  If there is a single non-list argument, then you get it as-is. 
This is true in Common Lisp too.
）

@item byte-to-string
此函数将一个包含字符数据的字节转换为一个单字节字符串。@xref{Converting Representations}.。
@end table

@node 格式化字符串, 大小写转换, 字符串转换, 字符串与字符
@comment  node-name,  next,  previous,  up
@section 格式化字符串
@cindex 格式化字符串
@cindex 字符串，格式化

  @dfn{格式化}指通过替换常量字符串中不同地方的值从而构造新的字符串的过程。这个常量字符串控制其他值如何打印，以及它们出现的位置，
；它被称为@dfn{格式串}。

  格式化通常用于计算待显示的信息。事实上，@code{message}和@code{erro}提供了和这里相同的格式化特性；它们与@code{format}的
区别在于如何使用格式化结果。

@defun format string &rest objects
此函数拷贝@var{string}，并通过编码对应的@var{objects}替换所有的格式说明，将结果字符串返回。
参数@var{objects}是计算过的用于格式化的值。

字符串@var{string}中的字符，与格式说明不同，直接被拷贝至输出字符串中，包括它们可能存在的文本属性。
@end defun

@cindex 格式说明中的@samp{%}
@cindex 格式说明
  格式说明是一个由@samp{%}开始的字符序列。因此，如果@var{string}中有一个@samp{%d}，则@code{format}函数将用待格式的
一个值（@var{objects}参数中的一个）的打印表示去替换它。

  例如：
@example
@group
(format "The value of fill-column is %d." fill-column)
     @result{} "The value of fill-column is 72."
@end group
@end example

  由于@code{format}将@samp{%}字符解释为格式说明，你应该@emph{永远}不要向它的传递任意字符串作为其第一个参数。特别是
在该字符串是由某些Lisp代码产生的情况下。除非该字符串@emph{已知}永远不会包含任何@samp{%}字符，下面描述的那样（译注：
这里指的是如何规免向@code{format}传入任意字符串的方法），最好向它传递@code{"%s"}作为第一个参数，而字符串作为第二个参数：

  Since @code{format} interprets @samp{%} characters as format
specifications, you should @emph{never} pass an arbitrary string as
the first argument.  This is particularly true when the string is
generated by some Lisp code.  Unless the string is @emph{known} to
never include any @samp{%} characters, pass @code{"%s"}, described
below, as the first argument, and the string as the second, like this:

@example
  (format "%s" @var{arbitrary-string})
@end example

  如果@var{string}包含超出一个格式说明，它对应于@var{objects}中相继的值。因此，@var{string}中的第一个格式说明使用
第一个这样的值，第二个格式说明使用第二个这样的值，依次类推。任何多余的格式说明（那些没有对应值的格式说明）将导致一个错误。
任何多余的待格式化的值将被忽略。

  某些格式说明要求特定类型的值。如果你提供了一个不满足需求的值，将会产生一个错误。

  下面是有效格式说明的表：

@table @samp
@item %s
用对象的不带引用的打印表示（也即使用@code{princ}，而不是@code{prin1}---@pxref{Output Functions}）替换该规格说明。
因此，字符串由其内容独自表示，而不带@samp{"}字符，并且其中的符号以不带@samp{\}字符的形式出现。（译注：这里指的应该是一些转义
后的字符，直接以转义后的结果输出）

如果对象是一个字符串，它的文本属性被拷贝至输出中。@samp{%s}它本身的文本属性也被拷贝，但对象的文本属性具有较高的优先级。

@item %S
用对象的带引用的打印表示（也即使用@code{prin1}---@pxref{Output Functions}）该格式说明。因此字符串将由@samp{"}圈起，并且
@samp{\}在必要时出现在那些特殊字符的前面。

@item %o
@cindex 整数至八进制
用整数的八进制表示替换该格式说明。

@item %d
用整数的十进制表示替换该格式说明。

@item %x
@itemx %X
@cindex 整数至十六进制
用整数的十六进制表示替换该格式说明。@samp{%x}使用小写，而@samp{%X}使用大写形式。

@item %c
用数值对应的字符替换该格式说明。

@item %e
用浮点数的指数形式替换该格式说明。

@item %f
用浮点数的点分形式替换该格式说明。

@item %g
或用浮点数指数形式，或用其点分形式替换格式说明，取决于哪个结果更短。

@item %%
用单个@samp{%}替换格式说明。这个格式说明不常见并用它不需要一个值。例如，@code{(format "%% %d" 30)}返回@code{"% 30"}。
@end table

  任何其他的格式字符都将产生一个@samp{Invalid format operation}错误。

  下面是几个例子：

@example
@group
(format "The name of this buffer is %s." (buffer-name))
     @result{} "The name of this buffer is strings.texi."

(format "The buffer object prints as %s." (current-buffer))
     @result{} "The buffer object prints as strings.texi."

(format "The octal value of %d is %o,
         and the hex value is %x." 18 18 18)
     @result{} "The octal value of 18 is 22,
         and the hex value is 12."
@end group
@end example

@cindex 域宽
@cindex 填充
  格式说明可以包含一个@dfn{宽度}，它是一个在@samp{%}和说明字符之间的十进制数。如果对象的打印表示小于该宽度，
@code{format}用填充扩展它。宽度指定符在@samp{%%}说明时被忽略。任意由宽度指定符引入的填充通常
由在左侧插入的空格组成。

@example
(format "%5d is padded on the left with spaces" 123)
     @result{} "  123 is padded on the left with spaces"
@end example

@noindent
如果宽度太小，@code{format}并不截断对象的打印表示。因此，你可以使用宽度在列之间指定最小空格而不丢失信息。
在下面的三个例子中，@samp{%7s}指明了为7的最小宽度。在第一个例子中，在@samp{%7s}中插入的字符串只有3个字符，
需要4个空格字符作为填充。在第二个例子中，@code{"specification"}有13个字符宽，但并不会被截断。

@example
@group
(format "The word `%7s' actually has %d letters in it."
        "foo" (length "foo"))
     @result{} "The word `    foo' actually has 3 letters in it."
(format "The word `%7s' actually has %d letters in it."
        "specification" (length "specification"))
     @result{} "The word `specification' actually has 13 letters in it."
@end group
@end example

@cindex flags in format specifications
  紧接着@samp{%}并在可选的宽度指定符之前，，你还可以置放一些@dfn{标记字符}。

  标记@samp{+}在正数前插入一个符号，所以它永远具有一个符号。一个作为标记的空格字符将在正数前播入一个空格。
（否则，正数将以其第一个数字开始。）这些标志在确保正数和负数使用相同列时有用。除了@samp{%d}、@samp{%e}、
@samp{%f}以及@samp{%g}之外，它们将被忽略，如果两个都被使用，@samp{+}优先。

  @samp{#}标记指定一个依赖于所用的格式的``替代形式''。对于@samp{%o}，它确保结果以@samp{0}开始。对于
@samp{%x}和@samp{%X}，它在结果前插入@samp{0x}或@samp{0X}。对于@samp{%e}、@samp{%f}以及@samp{%g}
，@samp{#}标记意味着即使精度是吗，也插入一个点分号。

  @samp{-}标记使得， 如果宽度指定符引入填充，将其插入在右侧而非左侧。@samp{0}标记确保填充由@samp{0}而
非空格构成并在左侧插入。这些用于那些它们无效的说明字符时，将被忽略：@samp{%s}、@samp{%S}以及@samp{%c}接
受@samp{0}标记，但仍在左侧插入@emph{空格}。如果@samp{-}和@samp{0}同时出现并有效，则@samp{-}优先。
（译注：从下面的例子可以看出，原文遗漏说明：对于@samp{%s}、@samp{%S}以及@samp{%c}，@samp{-}也能生效。）

@example
@group
(format "%06d is padded on the left with zeros" 123)
     @result{} "000123 is padded on the left with zeros"

(format "%-6d is padded on the right" 123)
     @result{} "123    is padded on the right"

(format "The word `%-7s' actually has %d letters in it."
        "foo" (length "foo"))
     @result{} "The word `foo    ' actually has 3 letters in it."
@end group
@end example

@cindex 格式说明中的精度
  所有格式说明在格式字符前（如果指定宽度，则在宽度之后）都允许一个可选的@dfn{精度}。精度是一个
跟在@samp{.}之后的数字串。对于浮点数说明（@samp{%e}、@samp{%f}、@samp{%g}），精度指定小数点
后有多少个十进制数字被显示（译注：原文说明不确，这里更正为小数点后有多少个十进制数字），如果是0，
则十进点点分也被忽略。对于@samp{%s}和@samp{%S}，精度将字符串截断成指定宽度，因此@samp{%.3s}
只显示@var{objects}的文本表示的前三个字符。精度对其他格式字符无效。

@node 大小写转换
@comment node-name, next, previous, up
@section Lisp中的大小写转换
@cindex 大写
@cindex 小写
@cindex 字符大小写
@cindex Lisp中的大小写转换

  字符大小写转换函数改变单个字符或字符串内容的大小写。这些函数通常只转换字母（即字母@samp{A}至@samp{Z}以
及@samp{a}至@samp{z}，还包括非@acronym{ASCII}字母）；其他字符不被替换。你可以通过指定一个大小写表，
用来指定一个不同的大小写转换映射（@pxref{大小写表}）。

  这些函数并不修改作为参数传递给它们的字符串。

  下面的例子使用@samp{X}以及@samp{x}，它们分别具有@acronym{ASCII}编码88以及120。

@defun downcase string-or-char
此函数将或是字符串或是字符的@var{string-or-char}转换成小写形式。

当@var{string-or-char}是一个字符串时，此函数返回一个参数字符串中大写字母均被转换成小写字母的新字符串。
当@var{string-or-char}是一个字符时，此函数返回对应的小写字符（一个整数）；如果原始字符是小写的，或者
不是一个字母，则返回值与原始字符相等。

@example
(downcase "The cat in the hat")
     @result{} "the cat in the hat"

(downcase ?X)
     @result{} 120
@end example
@end defun

@defun upcase string-or-char
此函数将或是字符串或是字符的@var{string-or-char}转换成大写形式。

当@var{string-or-char}是一个字符串时，此函数返回一个参数字符串中小写字母均被转换成大写字母的新字符串。
当@var{string-or-char}是一个字符时，此函数返回对应的大写字符（一个整数）；如果原始字符是大写的，或者
不是一个字母，则返回值与原始字符相等。

@example
(upcase "The cat in the hat")
     @result{} "THE CAT IN THE HAT"

(upcase ?x)
     @result{} 88
@end example
@end defun

@defun capitalize string-or-char
@cindex 大写字母化
此函数大写字母化字符串或字符。如果@var{string-or-char}是一个字符串，此函数返回一个新字符串，它的内容
是@var{string-or-char}的一个拷贝，其中的每一个单词都被大写字母化。这意味着每一个单词的第一个字符都被
转换成大写，其他字符被转换成小写。

单词的定义是一个包含任意连续字符的序列，该序列被分配到当前语法表的单词组成语法类中（@pxref{Syntax Class Table}）。

当@var{string-or-char}是一个字符时，此函数与@code{upcase}做相同的处理。

@example
@group
(capitalize "The cat in the hat")
     @result{} "The Cat In The Hat"
@end group

@group
(capitalize "THE 77TH-HATTED CAT")
     @result{} "The 77th-Hatted Cat"
@end group

@group
(capitalize ?x)
     @result{} 88
@end group
@end example
@end defun

@defun upcase-initials string-or-char
如果@var{string-or-char}是一个字符串，此函数返回一个新字符串，除单词的初始字符外不替换其他字符，它的内容是@var{string-or-char}
的一个拷贝，其中的每一个单词都的初始字母都被转换成大写形式。

单词的定义是一个包含任意连续字符的序列，该序列被分配到当前语法表的单词组成语法类中（@pxref{Syntax Class Table}）。

当@var{string-or-char}是一个字符时，此函数与@code{upcase}做相同的处理。

@example
@group
(upcase-initials "The CAT in the hAt")
     @result{} "The CAT In The HAt"
@end group
@end example
@end defun

  关于比较字符串的函数，@xref{文本比较}.；某些函数忽略大小写差异，或可以选择忽略大小写差异。

@node 大小写表
@section 大小写表

  你可以通过安装一个特殊的@dfn{大小写表}来定制大小写转换。一个大小写表指定了大写字母与小写字母的映射关系。
它即影响面向Lisp对象的大小写转换函数，也影响那些面向缓冲区内文本的转换函数（@pxref{Case Changes}）。每一个缓冲
都有一个大小写表；同样还有一个标准的转换表，用于初始化新缓冲区的转换表。

  一个大小写表是一个char-table类型（@pxref{Char-Tables}），它的子类型是@code{case-table}。这个char-table映射每一个
字符至其小写字符。它具有三个额外的槽，它们持有相关的表：

@table @var
@item upcase
大写表将每个字符映射至对应的大写字符。
@item canonicalize
规范化表将一个大小写相关的字符集合映射成该集合中的一个成员。
@item equivalences
等价表将一个大小写相关的字符集合中的每一个元素映射至该集合中的下一个元素。
@end table

  在简单情况下，你通常只需要指定至小写的映射，其他三个相关的表将会自动计算生成。

  对于某些语言，大小写并非一对一的关系。对于同一个大写等价字母，可能有两个不同的小写字母。
在这种情部钙，你即需要指定小写映射表，也需要指定大写映射表。

  另外一个@var{canonicalize}表将每个字符映射成其规范等价字符；任何两个由大小写转换相关的字符具有相同的规范等价字符。
例如，由于@samp{a}和@samp{A}大写小转换相关，它们应当具有相同的规范等价字符（该字符可以是@samp{a}，也可以是@samp{A}）。

  另外一个@var{equivalences}表将在每一个等价类（具有相同规范等价字符的字符）中的字符间循环交替映射。（对于通常的@acronym{ASCII}，
它将@samp{a}映射成@samp{A}，而将@samp{A}映射成@samp{a}，其他等价字符集合也类似。）

  当构造一个大小写表时，你可以指定@var{canonicalize}为@code{nil}；那么Emacs借助于小写和大写转换表填充此表。你也可以指定
@var{equivalences}为@code{nil}；那么Emacs将此@var{canonicalize}中构造此表。在实际用到的大小写表中，这些组件非@code{nil}。
不要尝试在不指定@var{canonicalize}时指定@var{equivalences}。

  以下是操作大小写表的函数：

@defun case-table-p object
此判断在@var{objects}是一个有效的转换表时返回非@code{nil}。
@end defun

@defun set-standard-case-table table
此函数设置@var{table}为标准大小写表，因此它将用于后续新创建的缓冲区。
@end defun

@defun standard-case-table
此函数返回标准大小写表。
@end defun

@defun current-case-table
此函数返回当前缓冲区的大小写表。
@end defun

@defun set-case-table table
此函数设置当前缓冲区的大小写表为@var{table}。
@end defun

@defmac with-case-table table body@dots{}
@code{with-case-table}宏保存当前大小写表，并且使@var{table}成为当前的大小写表，
执行@var{body}型，并将终还原大小写表。返回值是@var{body}中最后一个型的值。在通过@code{throw}
异常通出或错误（@pxref{Nonlocal Exits}）时，也将还原大小写表。
@end defmac

  某些语言环境修改@acronym{ASCII}字符的大小写转换；例如，在土耳其语言环境中，@samp{I}被小写为土耳其
语的``dotless i''。这将干扰那些需要常规ASCII大小写转换的代码，例如某些基于@acronym{ASCII}的网络协议
实现。在那些情况下，请使用@code{with-case-table}宏，并结合存储未修改的@acronym{ASCII}字符集的大小写
转换表的变量@var{ascii-case-table}。

@defvar ascii-case-table
@acronym{ASCII}字符集的大小写表。它不应当被任何其他语言环境设置所修改。
@end defvar

  对于那些定义了非@acronym{ASCII}字符集的包，以下三个其他函数是方便的例程。它们修改指定的@var{case-table}
所代表的大小写表；它们还修改标准语法表。@xref{Syntax Tables}.。通常你可以用这些函数改变标准大小写表。

@defun set-case-syntax-pair uc lc case-table
e此函数指定一对对应字母的大小写。
@end defun

@defun set-case-syntax-delims l r case-table
此函数设置@var{l}和@var{r}为一对大小写不变的分割符。
@end defun

@defun set-case-syntax char syntax case-table
此函数设置 @var{char}大小写不变，其语法为@var{syntax}。
@end defun

@deffn Command describe-buffer-case-table
此命令显示一个当前缓冲区内容的大小写表的描述。
@end deffn

@ignore
   arch-tag: 700b8e95-7aa5-4b52-9eb3-8f2e1ea152b4
@end ignore
