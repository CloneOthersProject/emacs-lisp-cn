@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2001,
@c   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011  Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@setfilename ../../info/lists
@node 列表, Sequences Arrays Vectors, 字符串与字符, Top
@chapter 列表
@cindex 列表
@cindex 列表的元素

  @dfn{列表}代表了包含一个或多个元素（可以是任意Lisp对象）的序列。列表与容器最重要的不同在于两个或多个列表可以共享它们的部分结构。
除外，你可以向列表中增加或删除元素，而不必拷贝整个列表。

@menu
* Cons Cells::          如何由cons cell构造列表。
* 列表相关的断定::        这个对象是列表吗？比如两个列表。
* 列表元素::             从列表中提取元素。
* 构造列表::             创建列表结构。
* 列表变量::             修改存储在变量里的列表。
* 修改列表::             向既有列表中存储新元素。
* 集合与列表::           列表可表示一个有限的数学集合。
* 关联列表::             列表可表示一个有效的关系或映射。
* 环::                  管理有个固定大小的对对象环。
@end menu

@node Cons Cells
@section 列表和Cons Cells
@cindex 列表和Cons Cells

  Lisp中的列表并不是一个原子类型；它们是从@dfn{cons cells}中构造的。一个cons cell是表示一个有序对的数据对象。也即，它具有两个槽，每个槽@dfn{持有}
或@dfn{引用}某些Lisp对象。其中一个槽被称为@sc{car}，而别一个被称为@sc{cdr}。（这些名字是惯例所为，请参考@ref{Cons Cell类型}.）@sc{cdr}读作``could-er.''

  当我们说``这个cons cell的@sc{car}是''时，我们指的是它的@sc{car}槽当前所持有的任意对象，@sc{cdr}亦同。

  一个列表是一系列的cons cell``链接在一起,''因此每个cell指向下一个cons cell。列表中的每个元素都有一个cons cell。根据惯例，cons cell的@sc{car}持有列表
元素，而@sc{cdr}则指向下一个cons cell。最后一个cons cell的@sc{cdr}是@code{nil}。@sc{car}与@sc{cdr}的这种不对称完全是一种惯例；在cons cell这个层面上，
@sc{car}和@sc{cdr}槽具有相同的特性。

@cindex 真列表
  由于@code{nil}是存放在列表中的最后一个cons cell的@sc{cdr}的惯例值，我们称这种列表为@dfn{真列表}。

  在Lisp中，我们将@code{nil}既当作符号，又当作列表；它是一个不具有任何元素的列表。为方便起见，符号@code{nil}可以被理解以@code{nil}为@sc{cdr}（同样@code{nil}
是其@sc{cdr}）。因此，真列表的@sc{cdr}总是一个真列表。

@cindex 点分列表
@cindex 循环列表
  如果列表最后一个cons cell的@sc{cdr}是其他値，即不是@code{nil}也不是其他的cons cell，由于其打印表示将使用@samp{.}，我们称这种结构为@dfn{点分列表}。这里有另
外一种可能：某些cons cell的@sc{cdr}可以指向列表中前面的cons cell。我们将这种结构成为@dfn{circular list}。

  在某些情况下，列表是真列表、循环列表或点分列表并不重要，如果程序不深入查看列表的最后一个cons cell，它不用在意。然而，某些操作列表的函数要求真列表，如果是点分列表，
它将报错。而大多数尝试查找链表结尾的函数在处理循环列表时将产生无穷循环。

@cindex 列表结构
  由于大多数cons cell都作为列表的一部分。@dfn{列表结构}这个短语用来指任何由cons cell构造出的结构。

  任一非空真列表@var{l}的@sc{cdr}是一个包含除了第一个元素的所有元素的列表。

  关于cons cell的读取和打印语法以及列表的``盒子和箭头''图示，请参考@xref{Cons Cell类型}.。

@node 列表相关的判定
@section 列表相关的判定

  以下判定测试一个Lisp对象是否是一个原子，是否是一个cons cell或列表，是否是特定的对象@code{nil}。（这里的许多判定可以由其他判定定义，但由于它们使用的很频繁，值得
将它们全部定义出来。）

@defun consp object
此函数在@var{object}是cons cell时返回@code{t}，否则返回@code{nil}。尽管@code{nil}是一个列表
，但它不是一个cons cell。
@end defun

@defun atom object
此函数在@var{object}是原子时返回@code{t}，否则返回@code{nil}。除cons cell外的对象都是原子。符号
@code{nil}即是一个原子，又是一个列表，它是唯一同属于两类的Lisp对象。
that is both.

@example
(atom @var{object}) @equiv{} (not (consp @var{object}))
@end example
@end defun

@defun listp object
此函数在@var{object}是cons cell或@code{nil}时返回@code{t}，否则返回@code{nil}。
@example
@group
(listp '(1))
     @result{} t
@end group
@group
(listp '())
     @result{} t
@end group
@end example
@end defun

@defun nlistp object
此函数是@code{listp}的反面：它在@var{object}不是列表时返回@code{t}，否则返回@code{nil}。

@example
(listp @var{object}) @equiv{} (not (nlistp @var{object}))
@end example
@end defun


@defun null object
此函数在@var{object}是@code{nil}时返回@code{t}，否则返回@code{nil}。此函数等同于@code{not}，但为
了更加清晰，我们在@var{object}被当作列表时使用它，而在@var{object}被当作真值时使用@code{not}。（请参考
@ref{Combining Conditons}.中的@code{not}）

@example
@group
(null '(1))
     @result{} nil
@end group
@group
(null '())
     @result{} t
@end group
@end example
@end defun


@node 列表元素
@section 访问列表元素
@cindex 列表元素

@defun car cons-cell
此函数返回@var{cons cell}第一个槽引用的值。换句话说，它返回@var{cons cell}的@sc{car}。

作为特例，如果@var{cons cell}是@code{nil}，这个函数返回@code{nil}。因此，任何列表都是有效的参数。
如果参数不是cons cell或@code{nil}时将报错。 

@example
@group
(car '(a b c))
     @result{} a
@end group
@group
(car '())
     @result{} nil
@end group
@end example
@end defun

@defun cdr cons-cell
此函数返回@var{cons cell}第二个槽引用的值。换句话说，它返回@var{cons cell}的@sc{cdr}。

作为特例，如果@var{cons cell}是@code{nil}，这个函数返回@code{nil}。因此，任何列表都是有效的参数。
如果参数不是cons cell或@code{nil}时将报错。 

@example
@group
(cdr '(a b c))
     @result{} (b c)
@end group
@group
(cdr '())
     @result{} nil
@end group
@end example
@end defun

@defun car-safe object
此函数允许你取得cons cell的@sc{car}但避免其他类型时的报错。在@var{object}是cons cell时，它返回@var{object}的
@sc{car}，另外的情况下返回@code{nil}。相比之下，@code{car}将在 @var{object}不是列表时返回错误。

@example
@group
(car-safe @var{object})
@equiv{}
(let ((x @var{object}))
  (if (consp x)
      (car x)
    nil))
@end group
@end example
@end defun

@defun cdr-safe object
此函数允许你取得cons cell的@sc{cdr}但避免其他类型时的报错。在@var{object}是cons cell时，它返回@var{object}的
@sc{cdr}，另外的情况下返回@code{nil}。相比之下，@code{cdr}将在 @var{object}不是列表时返回错误。

@example
@group
(cdr-safe @var{object})
@equiv{}
(let ((x @var{object}))
  (if (consp x)
      (cdr x)
    nil))
@end group
@end example
@end defun

@defmac pop listname
此宏提供一种检查列表的@sc{car}的方式，并将@sc{car}从列表中一次摘除。

它操作存在符号@var{listname}中的列表。它通过设置旧值的@sc{cdr}至符号@var{listname}来移除元素，但它同时返回
该列表的@sc{var}，即被移除的元素。

@example
x
     @result{} (a b c)
(pop x)
     @result{} a
x
     @result{} (b c)
@end example
@end defmac

@defun nth n list
@anchor{Definition of nth}
此函数返回@var{list}中的第@var{n}个元素。元素以0开始计数，所以@var{list}的@sc{car}是第0号元素。如果@var{list}
的长度是@var{n}或更小，返回@code{nil}。

如果@var{n}是负值，@code{nth}返回列表的第一个元素。

@example
@group
(nth 2 '(1 2 3 4))
     @result{} 3
@end group
@group
(nth 10 '(1 2 3 4))
     @result{} nil
@end group
@group
(nth -3 '(1 2 3 4))
     @result{} 1

(nth n x) @equiv{} (car (nthcdr n x))
@end group
@end example

函数@code{elt}相似，但它可应用于任何序列。由于历史原因，它以相反的顺序传参。请参考@xref{Sequence Functions}.。
@end defun

@defun nthcdr n list
此函数返回@var{list}的第@var{n}个@sc{cdr}。换句话说，它跳过@var{list}的前@var{n}个链并返回后继内容。

如果@var{n}是0或者负值，@code{nthcdr}返回@var{list}的所有元素。如果@var{list}的长度是@var{n}或者更小，@code{nthcdr}
返回@code{nil}。
@example
@group
(nthcdr 1 '(1 2 3 4))
     @result{} (2 3 4)
@end group
@group
(nthcdr 10 '(1 2 3 4))
     @result{} nil
@end group
@group
(nthcdr -3 '(1 2 3 4))
     @result{} (1 2 3 4)
@end group
@end example
@end defun

@defun last list &optional n
此函数返回@var{list}的最后一个链接。此链接的@code{car}是该列表的最后一个元素。如果@var{list}是空，@code{nil}将被返回。
如果@var{n}不是@code{nil}，倒数第@var{n}个链接将被返回，而如果@var{n}大于@var{list}的长度度，则整@var{list}将被返回。
@end defun

@defun safe-length list
@anchor{safe-length的定义}
此函数返回@var{list}的长度，但避免错误或者无限循环。它通常返回list中不同的cons cell的个数。然而，对于循环列表，该值就是
一个上限；它通常很大。

如果@var{list}不是@code{nil}或者cons cell，它返回0。
@end defun

  当你不担心列表是循环列表时，计算其长度的通常办法就是使用@code{length}。请参考@xref{Sequence Functions}.。

@defun caar cons-cell
等同于@code{(car (car @var{cons-cell}))}。
@end defun

@defun cadr cons-cell
等同于@code{(car (cdr @var{cons-cell}))}或@code{(nth 1 @var{cons-cell})}。
@end defun

@defun cdar cons-cell
等同于@code{(cdr (car @var{cons-cell}))}。
@end defun

@defun cddr cons-cell
等同于@code{(cdr (cdr @var{cons-cell}))}或@code{(nthcdr 2 @var{cons-cell})}。
@end defun

@defun butlast x &optional n
此函数返回最后一个或最后@var{n}个元素被移除的列表。如果@var{n}比0大，它将拷贝一份列表以便不破坏原列表。
通常，@code{(append (butlast @var{x} @var{n}) (last @var{x} @var{n}))}将返回与@var{x}相等的
一个列表。
@end defun

@defun nbutlast x &optional n
此函数是@code{butlast}的另一个版本，此版本破坏性地修改元素的@code{cdr}，而不是拷贝该列表。
（译注：请注意如下代码：
@example
(setq a '(1 2 3))
(equal (nbutlast a) a)
     @result{} t
(equal (nbutlast a) a)
     @result{} nil
@end example
@end defun

@node 创建列表
@comment  node-name,  next,  previous,  up
@section 创建Cons cell和列表
@cindex cons cells
@cindex 创建列表

  列表在Lisp中居核心地位，许多函数可以用来创建列表。@code{cons}是创建列表的基础函数；然而有趣的是，在Emacs的源码中，@code{list}
要比@code{cons}用得多。

@defun cons object1 object2
此函数用来创建新列表结构的最基本函数。它创建一个新的cons cell，用@var{object1}作@sc{car}，而@code{object2}作@sc{cdr}，之后返回
新创建的cons cell。参数@var{object1}和@var{object2}可以是任意的cons cell，但通常@var{object2}是一个列表。

@example
@group
(cons 1 '(2))
     @result{} (1 2)
@end group
@group
(cons 1 '())
     @result{} (1)
@end group
@group
(cons 1 2)
     @result{} (1 . 2)
@end group
@end example

@cindex consing
@code{cons}通常用于向列表头插入一个单个元素。这称为@dfn{向列表中consing}。
@footnote{没有严格相等地向列表尾插入元素的方法。你可以使用@code{(append @var{listname} (list @var{newelt}))}，
它通过拷贝@var{listname}创建一个新的列表，并将@var{newelt}插入其尾部。或者你可以使用@code{(nconc @var{listname} (list @var{newelt}))}，
它通过跟踪@var{listname}的所有@sc{cdr}，并替换终结的@code{nil}。请比较使用@code{cons}向列表头插入元素，它即不拷贝，也不修改列表。
例如：

@example
(setq list (cons newelt list))
@end example

注意在此例中使用到的名为@code{list}的变量与下面描述的函数@code{list}之间并没有冲突；任何符号都可以即做为变量名又作为函数。
@end defun

@defun list &rest objects
此函数使用@var{objects}作为元素创建一个列表。生成的列表总是以@code{nil}结尾。如果没有@var{objects}给出，将返回空表。

@example
@group
(list 1 2 3 4 5)
     @result{} (1 2 3 4 5)
@end group
@group
(list 1 2 '(3 4 5) 'foo)
     @result{} (1 2 (3 4 5) foo)
@end group
@group
(list)
     @result{} nil
@end group
@end example
@end defun

@defun make-list length object
此函数创建具有@var{length}个元素的一个列表，它的每个元素都是@var{object}。请将@code{make-list}和@code{make-string}作下比较（@pxref{创建字符串}）。

@example
@group
(make-list 3 'pigs)
     @result{} (pigs pigs pigs)
@end group
@group
(make-list 0 'pigs)
     @result{} nil
@end group
@group
(setq l (make-list 3 '(a b)))
     @result{} ((a b) (a b) (a b))
(eq (car l) (cadr l))
     @result{} t
@end group
@end example
@end defun

@defun append &rest sequences
@cindex 拷贝列表
此函数返回一个包含@var{sequences}中所有元素的列表。@var{sequences}可以是列表、容器、布尔容器或字符串，但最后一个通常是一个列表。
所有参数除了最后一个外都将被拷贝，所以任一参数都不会被替换。（关于非拷贝方式合并两表的方式，请参考@ref{Rearrangement}.一节中的@code{nconc}。）

更通俗的来说，@code{append}的最后一个元素可以是任意Lisp对象。最后一个元素不被拷贝或转换；它变成新列表中的最后一个cons cell。如果最后一个参数
本身是一个列表，那么它的元素实际上变成了结果列表中的有效元素。如果最后一个元素不是列表，则结果列表是一个点分式的列表，因为真列表表要求最终的@sc{cdr}是@code{nil}，
而它不满足这个要求。
@end defun

  以下是一个使用@code{append}的例子：

@example
@group
(setq trees '(pine oak))
     @result{} (pine oak)
(setq more-trees (append '(maple birch) trees))
     @result{} (maple birch pine oak)
@end group

@group
trees
     @result{} (pine oak)
more-trees
     @result{} (maple birch pine oak)
@end group
@group
(eq trees (cdr (cdr more-trees)))
     @result{} t
@end group
@end example

  你可通过观察盒子图解来了解@code{append}如何工作。变量@code{trees}被设置为列表@code{(pine oak)}，继而
变量@code{more-trees}被设置为@code{(maple birch pine oak)}。然而，@code{trees}继续指向原表：

@smallexample
@group
more-trees                trees
|                           |
|     --- ---      --- ---   -> --- ---      --- ---
 --> |   |   |--> |   |   |--> |   |   |--> |   |   |--> nil
      --- ---      --- ---      --- ---      --- ---
       |            |            |            |
       |            |            |            |
        --> maple    -->birch     --> pine     --> oak
@end group
@end smallexample

  一个空序列对@code{appned}的返回值不起作用。因此，@code{nil}使得强制拷贝前一个参数。

@example
@group
trees
     @result{} (pine oak)
@end group
@group
(setq wood (append trees nil))
     @result{} (pine oak)
@end group
@group
wood
     @result{} (pine oak)
@end group
@group
(eq wood trees)
     @result{} nil
@end group
@end example

@noindent
在函数@code{copy-sequence}发明前，这曾经是一种拷贝列表的常用方式。（请参考@xref{Sequences Arrays Vectors}.）

  以下说明如何用容器和字符串做为@code{append}的参数：

@example
@group
(append [a b] "cd" nil)
     @result{} (a b 99 100)
@end group
@end example

  借助于@code{apply}（@pxref{Calling Functions}}.），我们可以补加在一个列表的列表的所有列表：

@example
@group
(apply 'append '((a b c) nil (x y z) nil))
     @result{} (a b c x y z)
@end group
@end example

  如果未给出@var{sequences}，@code{append}函数将返回@code{nil}：

@example
@group
(append)
     @result{} nil
@end group
@end example

  以下是最后一个参数不是列表的示例：

@example
(append '(x y) 'z)
     @result{} (x y . z)
(append '(x y) [z])
     @result{} (x y . [z])
@end example

@noindent
第二个示例演示了当最后一个参数不是列表的情况，该序列的元素并未成为结果列表的元素。相反的，像其他任意非列表的参数一样，
它成为最后的@sc{cdr}。

@defun reverse list
此函数创建一个与原列表元素相反的新列表。原参数@var{list}并@emph{未}被替换。

@example
@group
(setq x '(1 2 3 4))
     @result{} (1 2 3 4)
@end group
@group
(reverse x)
     @result{} (4 3 2 1)
x
     @result{} (1 2 3 4)
@end group
@end example
@end defun

@defun copy-tree tree &optional vecp
此函数返回@code{tree}树的拷贝。如果@var{tree}是一个cons cell，它用同样的@sc{car}和@sc{cdr}创建一个新的cons cell，
然后用同样的方式递归地拷贝@sc{car}和@sc{cdr}。

通常，当@var{tree}是非cons cell的任意对象，@code{copy-tree}直接返回@var{tree}。然而，如果@var{vecp}非空，它也拷贝
容器（并递归拷贝容器的元素）。
@end defun

@defun number-sequence from &optional to separation
此函数返回以@var{from}起始并以@var{separation}步长增加的一个列表，并在@var{to}或恰好在@var{to}之前终结。@var{separation}}
可以是正数或负数，默认是1。如果@var{to}是@code{nil}或在数值上与@var{from}相等，结果列表是单元素的列表@code{(@var{from})}。
如果@var{to}小于@var{from}并且@var{separation}是正数，或大于@var{from}并且@var{separation}是负数，则结果是@code{nil}，
这是因为这些参数指明了一个空序列。

如果@var{separation}是0并且@var{to}即不是@code{nil}或在数值上与@var{from}相等，@code{number-sequence}将产生一个错误，
因为这些参数指明了一个无限的序列。

所有参数即可以是整数，也可以是浮点数。然后，浮点数将会很棘手，因为浮点算数不是精确的。例如，依赖于机器实现，@code{(number-sequence 0.4 0.6 0.2)}
很可能返回具有一个元素的列表@code{(0.4)}，而@code{(number-sequence 0.4 0.8 0.2)}返回一个具有三个元素的列表。列表的第@var{n}个元素用精确的工式
@code{(+ @var{from} (* @var{n} @var{separation}))}计算。因此，如果你想确保@var{to}在列表中被包含，你可以传递一个像这样精确的表达式做为参数
@var{to}。或者，你可以用一个稍大的值替换@var{to}（或在@var{separation}是负值的情况下用稍小的负值替换）。

一些例子:

@example
(number-sequence 4 9)
     @result{} (4 5 6 7 8 9)
(number-sequence 9 4 -1)
     @result{} (9 8 7 6 5 4)
(number-sequence 9 4 -2)
     @result{} (9 7 5)
(number-sequence 8)
     @result{} (8)
(number-sequence 8 5)
     @result{} nil
(number-sequence 5 8 -1)
     @result{} nil
(number-sequence 1.5 6 2)
     @result{} (1.5 3.5 5.5)
@end example
@end defun

@node 列表变量
@section 修改列表变量

  下面的这些函数以及一个宏，提供用来修改存储在变量中的列表的便捷手段。

@defmac push newelt listname
这个宏提供了如下代码的另一种写法：
@code{(setq @var{listname} (cons @var{newelt} @var{listname}))}.

@example
(setq l '(a b))
     @result{} (a b)
(push 'c l)
     @result{} (c a b)
l
     @result{} (c a b)
@end example
@end defmac

   如下是两个修改作为变量值的列表的函数。

@defun add-to-list symbol element &optional append compare-fn
此函数在@var{element}不是变量@var{symbol}值（译注：指一个列表）的成员时，将通过对@var{elment}和旧值进行
cons设置@var{symbol}。不论值是否被更新，它都返回结果列表。在调用前，@var{symbol}的值最好是一个列表。
@code{add-to-list}使用@var{compare-fn}来将@var{element}与表的既有元素作比；如果@var{compare-fn}是
@code{nil}，它使用@code{equal}。

一般地，如果@var{element}被添加，它将被添加在@var{symbol}值对应的列表头部，但如果可选参数@var{append}是
非@code{nil}，它将被添加在尾部。

参数@var{symbol}不被隐式引用；@code{add-to-list}是一个普通函数，像@code{set}但不像@code{setq}。如果这
是你期望的，你需要自行引用该参数。
@end defun

下面展示如何使用@code{add-to-list}的几个场景：

@example
(setq foo '(a b))
     @result{} (a b)

(add-to-list 'foo 'c)     ;; @r{Add @code{c}.}
     @result{} (c a b)

(add-to-list 'foo 'b)     ;; @r{No effect.}
     @result{} (c a b)

foo                       ;; @r{@code{foo} was changed.}
     @result{} (c a b)
@end example

  和@code{(add-to-list '@var{var} @var{value})}等价的一个表达式如下：

@example
(or (member @var{value} @var{var})
    (setq @var{var} (cons @var{value} @var{var})))
@end example

@defun add-to-ordered-list symbol element &optional order
此函数通过将@var{elemtn}插入在@var{symbol}的旧值（译注：一个列表）中由@var{order}所指定的位置上，
从而设置@var{symbol}变量，该旧值必须是一个列表。如果@var{element}已经是该列表的一个成员，它在列表
中的位置将根据@var{order}进行调整。成员关系通过@code{eq}来进行测试。不论更新与否，都返回结果列表。

@var{order}通常是一个数值（整数或浮点数），此时列表的元素将以非递减数值方式排序。

@var{order}也可以被忽略或是@code{nil}。那么，如果@var{element}已经在列表中（译注：未避免疑惑，这里
我补充上了已经在列表中这个条件）且具有数值顺序，它将保持位置不变；否则@var{element}将不具有数值顺序。
没有数值顺序的元素将无序地被放在列表尾部。

所有@var{order}的其他值将使得@var{element}在具有数值顺序时，将移除其数值顺序；否则，它等同于@code{nil}
时的行为。

参数@var{symbol}不被隐式引用；@code{add-to-ordered-list}是一个普通函数，像@code{set}但不像@code{setq}。如果这
是你期望的，你需要自行引用该参数。

顺序信息将被存储在@var{symbol}的名为@code{list-order}属性对应的哈希表中。
@end defun

下面展示如何使用@code{add-to-orderedlist}的几个场景：

@example
(setq foo '())
     @result{} nil

(add-to-ordered-list 'foo 'a 1)     ;; @r{Add @code{a}.}
     @result{} (a)

(add-to-ordered-list 'foo 'c 3)     ;; @r{Add @code{c}.}
     @result{} (a c)

(add-to-ordered-list 'foo 'b 2)     ;; @r{Add @code{b}.}
     @result{} (a b c)

(add-to-ordered-list 'foo 'b 4)     ;; @r{Move @code{b}.}
     @result{} (a c b)

(add-to-ordered-list 'foo 'd)       ;; @r{Append @code{d}.}
     @result{} (a c b d)

(add-to-ordered-list 'foo 'e)       ;; @r{Add @code{e}}.
     @result{} (a c b e d)          ;; 译注：未指定@var{order}，并且'e不具有数值顺序，
                                    ;; 而d也没有数值顺序，故d和e无序的放在一起。

foo                       ;; @r{@code{foo} was changed.}
     @result{} (a c b e d)
@end example

@node 修改列表
@section 修改既有的列表结构
@cindex 破坏性列表操作

  你可以利用原始函数@code{setcar}和@code{setcdr}来修改一个cons cell的@sc{car}和@sc{cdr}。由于它们修改了
既有的列表结构，我们称它们是``破坏性''的操作。

@cindex CL note---@code{rplaca} vs @code{setcar}
@quotation
@findex rplaca
@findex rplacd
@b{Common Lisp注释:} Common Lisp使用函数@code{rplaca}和@code{rplacd}来替换列表结构；它们和@code{setcar}和
@code{setcdr}用相同的方式改变列表结构，但Common Lisp函数返回cons cell而@code{setcar}和@code{setcdr}返回新的
@sc{car}或@sc{cdr}。
@end quotation

@menu
* Setcar::          替换列表中的一个元素。
* Setcdr::          替换列表骨干中的一部分。
  　　　　　　　　　　　　它可以用来移除和添加元素。
* Rearrangement::   重新排序列表中的元素；合并列表。
@end menu

@node Setcar
@subsection 使用@code{setcar}替换列表元素

  通过@code{setcar}改变一个cons cell的@sc{car}。当对列表使用时，@code{setcar}用一个不同的元素替换列表的一个元素。

@defun setcar cons object
此函数将@var{object}作为@var{cons}的新@sc{car}存储起来，替换它原来的@sc{car}。换句话说，它改变@var{cons}的@sc{car}槽使
其指向@var{object}。它返回@var{object}的值。例如：

@example
@group
(setq x '(1 2))
     @result{} (1 2)
@end group
@group
(setcar x 4)
     @result{} 4
@end group
@group
x
     @result{} (4 2)
@end group
@end example
@end defun

  它cons cell是几个列表的共享结构时，向cons中存储一个新的@sc{car}将改变每个列表的一个元素。下面是一个例子：

@example
@group
;; @r{创建两个部分共享的列表。}
(setq x1 '(a b c))
     @result{} (a b c)
(setq x2 (cons 'z (cdr x1)))
     @result{} (z b c)
@end group

@group
;; @r{替换共享cons的@sc{car}。}
(setcar (cdr x1) 'foo)
     @result{} foo
x1                           ; @r{两个列表同时被改变。}
     @result{} (a foo c)
x2
     @result{} (z foo c)
@end group

@group
;; @r{替换非共享cons的@sc{car}。}
(setcar x1 'baz)
     @result{} baz
x1                           ; @r{只有一个列表被改变。}
     @result{} (baz foo c)
x2
     @result{} (z foo c)
@end group
@end example

  下面是两个共享结构的的列表的图解，展示了为何替换@code{b}将同时修改它们：

@example
@group
        --- ---        --- ---      --- ---
x1---> |   |   |----> |   |   |--> |   |   |--> nil
        --- ---        --- ---      --- ---
         |        -->   |            |
         |       |      |            |
          --> a  |       --> b        --> c
                 |
       --- ---   |
x2--> |   |   |--
       --- ---
        |
        |
         --> z
@end group
@end example

  下面时盒式记法的另一种形式，展示了相同的关系：

@example
@group
x1:
 --------------       --------------       --------------
| car   | cdr  |     | car   | cdr  |     | car   | cdr  |
|   a   |   o------->|   b   |   o------->|   c   |  nil |
|       |      |  -->|       |      |     |       |      |
 --------------  |    --------------       --------------
                 |
x2:              |
 --------------  |
| car   | cdr  | |
|   z   |   o----
|       |      |
 --------------
@end group
@end example

@node Setcdr
@subsection 替换列表的CDR

  用来修改@sc{cdr}的最底层原子函数是@sc{cdr}。

@defun setcdr cons object
此函数将@var{object}作为@var{cons}新的@sc{cdr}进行存储，替换原来的@sc{cdr}。换句话说，
它改变@var{cons}的@sc{cdr}结构，让其指向@var{object}。它返回@var{object}的值。
@end defun

　下面是用一个新列表来替换列表的@sc{cdr}的示例。因为要建立一个不同的元素序列，该列表除了第一个元素外的所有元素
都被移除。第一个元素未被修改，因为它保存在该列表的@sc{car}中，不被@sc{cdr}访问到。

@example
@group
(setq x '(1 2 3))
     @result{} (1 2 3)
@end group
@group
(setcdr x '(4))
     @result{} (4)
@end group
@group
x
     @result{} (1 4)
@end group
@end example

  你可以通过替换列表中cons cell的@sc{cdr}来从列表中间删除元素。例如，这里我们通过修改第一个cons cell的@sc{cdr}，
从列表@code{(a b c)}中删除第二个元素@code{b}。

@example
@group
(setq x1 '(a b c))
     @result{} (a b c)
(setcdr x1 (cdr (cdr x1)))
     @result{} (c)
x1
     @result{} (a c)
@end group
@end example

　下面是用盒式记法演示的结果：

@smallexample
@group
                   --------------------
                  |                    |
 --------------   |   --------------   |    --------------
| car   | cdr  |  |  | car   | cdr  |   -->| car   | cdr  |
|   a   |   o-----   |   b   |   o-------->|   c   |  nil |
|       |      |     |       |      |      |       |      |
 --------------       --------------        --------------
@end group
@end smallexample

@noindent
第二个曾经持有元素@code{b}的cons cell，仍然存在并且其@sc{car}仍然是@code{b}，但它不是在该列
表的一部分。

  同样地很容易通过改变@sc{cdr}来插入新元素。

@example
@group
(setq x1 '(a b c))
     @result{} (a b c)
(setcdr x1 (cons 'd (cdr x1)))
     @result{} (d b c)
x1
     @result{} (a d b c)
@end group
@end example

　下面是用盒式记法演示的结果：

@smallexample
@group
 --------------        -------------       -------------
| car  | cdr   |      | car  | cdr  |     | car  | cdr  |
|   a  |   o   |   -->|   b  |   o------->|   c  |  nil |
|      |   |   |  |   |      |      |     |      |      |
 --------- | --   |    -------------       -------------
           |      |
     -----         --------
    |                      |
    |    ---------------   |
    |   | car   | cdr   |  |
     -->|   d   |   o------
        |       |       |
         ---------------
@end group
@end smallexample

@node 重组
@subsection 重组列表函数
@cindex 列表重组
@cindex 列表修改

  下面是一些通过修改列表中cons cell的@sc{cdr}从而``破坏性''地重组列表的函数。我们之所以称这些
函数为``破坏性''地，是因为它们对作为参数传递给它们的列表，重新连接列表中的cons cell，并返回修改
后的列表。

@ifnottex
  关于另外一个修改cons cell的函数，请参考@ref{Sets And Lists}.一节中的@code{delq}。
@end ifnottex
@iftex
   在后续章节中的@coe{delq}是另外一个破坏性列表操作的示例。   
@end iftex

@defun nconc &rest lists
@cindex 联结列表
@cindex 合并列表
此函数返回包含@var{lists}中所有元素的列表。不像@code{append}（参考@pxref{Building Lists}.），@var{lists}
并@emph{不}被拷贝，而是将@var{lists}中的每个列表最后的@sc{cdr}修改为指向下一个列表。@var{lists}中最后一个列
表不被替换。例如：

@example
@group
(setq x '(1 2 3))
     @result{} (1 2 3)
@end group
@group
(nconc x '(4 5))
     @result{} (1 2 3 4 5)
@end group
@group
x
     @result{} (1 2 3 4 5)
@end group
@end example

   因为@code{nconc}最后一个参数并不被修改，因此使用一个常量列表是合理的，例如@code{'(4 5)}，就像上面的例子一样。
基于同样的原因，最后一个参数可以不是列表：

@example
@group
(setq x '(1 2 3))
     @result{} (1 2 3)
@end group
@group
(nconc x 'z)
     @result{} (1 2 3 . z)
@end group
@group
x
     @result{} (1 2 3 . z)
@end group
@end example

然后，其他参数（除了最后一个参数的所有参数）必须是列表。

一个通常的陷阱是用一个被引用的常量列表做为非最后一个参数传递给@code{nconc}。如果你这样做，你的程序每次执行时都将变化！
下面演示了将发生什么：

@smallexample
@group
(defun add-foo (x)            ; @r{我们使用这个函数
  (nconc '(foo) x))           ;   @r{将@code{foo}插入至其参数头部。}
@end group

@group
(symbol-function 'add-foo)
     @result{} (lambda (x) (nconc (quote (foo)) x))
@end group

@group
(setq xx (add-foo '(1 2)))    ; @r{看起来工作正常。}
     @result{} (foo 1 2)
@end group
@group
(setq xy (add-foo '(3 4)))    ; @r{发生了什么？}
     @result{} (foo 1 2 3 4)
@end group
@group
(eq xx xy)
     @result{} t
@end group

@group
(symbol-function 'add-foo)
     @result{} (lambda (x) (nconc (quote (foo 1 2 3 4) x)))
@end group
@end smallexample
@end defun

@defun nreverse list
@cindex reversing a list
  此函数将反转@var{list}中元素的顺序。不像@code{revert}，@code{nreverse}通过反转构造列表的cons cell的@sc{cdr}来
修改其参数。作为@var{list}的最后一个cons cell将变成新列表的第一个元素。

  例如：

@example
@group
(setq x '(a b c))
     @result{} (a b c)
@end group
@group
x
     @result{} (a b c)
(nreverse x)
     @result{} (c b a)
@end group
@group
;; @r{第一个cons cell变成了最后一个。}
x
     @result{} (a)
@end group
@end example

  为避免混淆，我们通常将@code{nreverse}的结构存回保存原列表的变量里。

@example
(setq x (nreverse x))
@end example

  下面是对我们最喜欢的例子@code{(a b c)}执行@code{nreverse}的图示：

@smallexample
@group
@r{原始列表头：}                       @r{反转列表：}
 -------------        -------------        ------------
| car  | cdr  |      | car  | cdr  |      | car | cdr  |
|   a  |  nil |<--   |   b  |   o  |<--   |   c |   o  |
|      |      |   |  |      |   |  |   |  |     |   |  |
 -------------    |   --------- | -    |   -------- | -
                  |             |      |            |
                   -------------        ------------
@end group
@end smallexample
@end defun

@defun sort list predicate
@cindex 稳定排序
@cindex 排序列表
此函数稳定地对@var{list}进行排序，尽管是破坏性地，它返回排序后列表。它使用@var{predicate}进行排序。
稳定的列排序指的那些具有相同的比较键值的元素将在排序前后维持他们的相对顺序。当根据不同的标准对元素进行
连续的排序时，稳定性很重要。


参数@var{predicate}必须是一个接受两个参数的函数。以两个来自@var{list}中的元素做为参数被调用。
要进行升序排序，@var{predicate}必须在第一个参数``小于''第二个参数时返回非@code{nil}，否则返回
@code{nil}。


函数@var{predicate}必须对任意的参数对都给出可靠的结果，至少在一次@code{sort}调用期间。它必须是@dfn{反对称的}，
也即如果@var{a}小于@var{b}，则@var{b}不能小于@var{a}。它必须是@dfn{传递的}，也即如果@var{a}小于@var{b}，并
且@var{b}小于@var{c}，那么@var{a}必须小于@var{c}。如果使用一个不满足这些要求的函数，那么排序结果将是不可预知的。

@code{sort}的破坏性特质是指它以修改cons cell的@sc{cdr}来重排构成列表的cons cell。非破坏性的排序将按其顺序创建
新的cons cell来存储元素。如果你期望避免破坏原始列表而是创建一个排序后的拷贝的话，先用@code{copy-sequence}来拷贝
然后再进行排序。

排序并不改变@var{list}中的cons cell的@sc{car}；在@var{list}中原来在@sc{car}中持有@code{a}的cons cell将在
排序后仍在@sc{car}中持有@code{a}，但因@sc{cdr}的修改它将出现在列表的另外位置上。例如：

@example
@group
(setq nums '(1 3 2 6 5 4 0))
     @result{} (1 3 2 6 5 4 0)
@end group
@group
(sort nums '<)
     @result{} (0 1 2 3 4 5 6)
@end group
@group
nums
     @result{} (1 2 3 4 5 6)
@end group
@end example

@noindent
@strong{警告}: 注意在列表中将不在包含０;它仍在原来的cons cell中，但它不在是列表中的第一个了。不要假定原来持有参数
的变量将持有排序后的整个列表！你可以将@code{sort}的结构保存起来并使用它。大多数情况下我们将结果存回持有原来列表的
变量中。

@example
(setq nums (sort nums '<))
@end example

关于进行排序的更多函数，请参考@xref{Sorting}.一节。
对于@code{sort}的一个有用的例子，请参考@ref{Accessing Documentation}一节中的@code{documentation}.。
@end defun

@node 集合和列表
@section 将列表当作集合使用
@cindex 将列表当作集合
@cindex 集合

  列表可以表达一个无序的数学集合。如果一个值出现在列表中，就简单地将其作为集合的一个元素，并忽略列表的顺序。
要形成两个集合的联合，可以使用@code{append}（只要你不在意产生重复元素）。你可以使用@code{delete-dups}
移除@code{equal}（译注：这里指的是用@code{equal}函数来确定是否重复，下面的@code{equal}版本也是如此
，可以用describe-function查看具体差异）的重复元素。对于集合而言，其他的有用函数包括@code{memq}和
@code{delq}，以及他们的@code{equal}版本，即@code{member}和@code{delete}。

@cindex CL注释---缺乏@code{union}、@code{intersection}
@quotation
@b{Common Lisp注释：} Common Lisp有用于集合操作的@code{union}（它避免产生重复元素）以及@code{intersection}。
但GNU Emacs Lisp不提供它们。你可以按你希望的方式实现它们。
@end quotation

@defun memq object list
@cindex 列表的成员关系
此函数测试@var{object}是否是@var{list}的成员。如果它是，@code{memq}返回一个包含@var{object}首次出现开始的列表。
否则，它返回@code{nil}。@code{memq}中的字母@samp{q}说明它使用@code{eq}来比较@var{object}和列表中的元素。例如：

@example
@group
(memq 'b '(a b c b a))
     @result{} (b c b a)
@end group
@group
(memq '(2) '((1) (2)))    ; @r{@code{(2)}和@code{(2)}用@code{eq}比较时并不相等。　}
     @result{} nil
@end group
@end example
@end defun

@defun delq object list
@cindex 删除列表元素
此函数破坏性地删除列表中和@var{object}用@code{eq}比较相等的所有元素。@code{delq}中的@samp{q}说明
它使用@code{eq}来比较@var{object}和列表中的元素，像@code{memq}和@code{remq}一样。
@end defun

当@code{delq}从列表前面删除元素时，它简单地向列表后前进并返回自删除的元素后开始的子列表：

@example
@group
(delq 'a '(a b c)) @equiv{} (cdr '(a b c))
@end group
@end example

当待删除的元素处理于列表中间时，删除它将导致改变@sc{cdr}（请参考@pxref{Setcdr}.）。

@example
@group
(setq sample-list '(a b c (4)))
     @result{} (a b c (4))
@end group
@group
(delq 'a sample-list)
     @result{} (b c (4))
@end group
@group
sample-list
     @result{} (a b c (4))
@end group
@group
(delq 'c sample-list)
     @result{} (a b (4))
@end group
@group
sample-list
     @result{} (a b (4))
@end group
@end example

注意@code{(delq 'c sample-list)}修改@code{sample-list}以便将第三个元素分出，但@code{(delq 'a sample-list)}
却未分出任何东西---它只是返回一个较短的列表。不要假定先前存有参数@var{list}的变量将含有较少的元素，或它仍持有原有的
列表！替代地，将@code{delq}的结果存起来再使用它。大多数情况下我们将结果存持有原来列表的变量：

@example
(setq flowers (delq 'rose flowers))
@end example

在下面的例子中，@code{delq}尝试删除的@code{(4)}和@code{sample-list}中的@code{(4)}用@code{eq}测试并不相等：
（译注：注意前面提到的读取语法，@code{eq}比较的是对象相等性，而调用时每次@code{(4)}都会创建一个新的列表对象，故而
@code{eq}测试失败。）

@example
@group
(delq '(4) sample-list)
     @result{} (a c (4))
@end group

如果你要删除与给定值@code{equal}测试相等的元素，使用@code{delete}函数（见下）。
@end example

@defun remq object list
此函数返回@var{list}的一个拷贝，该拷贝的所有与@var{object}用@code{eq}测试相等的元素被删除。@code{remq}中的@samp{q}说明
它使用@code{eq}来比较@var{object}和列表中的元素。

@example
@group
(setq sample-list '(a b c a b c))
     @result{} (a b c a b c)
@end group
@group
(remq 'a sample-list)
     @result{} (b c b c)
@end group
@group
sample-list
     @result{} (a b c a b c)
@end group
@end example
@end defun

@defun memql object list
函数@code{memql}测试@var{object}是否是@var{list}的一个成员，它使用@code{eql}
来比较列表成员和@var{object}，因此将以数值比较浮点数。如果@var{object}是列表的成员，
@code{memql}返回以它第一次在列表中出现开始的子列表。否则，它返回@code{nil}。

将下面这个和@code{memq}相比：

@example
@group
(memql 1.2 '(1.1 1.2 1.3))  ; @r{@code{1.2}和@code{1.2}用@code{eql}比较相等。}
     @result{} (1.2 1.3)
@end group
@group
(memq 1.2 '(1.1 1.2 1.3))  ; @r{@code{1.2}和@code{1.2}用@code{eq}比较不等。}
     @result{} nil
@end group
@end example
@end defun

下面这三个函数和@code{memq}、@code{delq}以及@code{remq}相似，但使用@code{equal}而不是
@code{eq}来比较元素。@xref{相等判定}.

@defun member object list
函数@code{member}用@code{equal}比较@var{object}和列表元素，来测试@var{list}是否
包含@var{object}。如果@var{object}是其成员，则返回以它第一次在列表中出现开始的子列表。
否则返回@code{nil}。


以下面与@code{memq}作比较：

@example
@group
(member '(2) '((1) (2)))  ; @r{@code{(2)}和@code{(2)}用@code{equal}比较相等。}
     @result{} ((2))
@end group
@group
(memq '(2) '((1) (2)))    ; @r{@code{(2)}和@code{(2)}用@code{eq}比较相等。}
     @result{} nil
@end group
@group
;; @r{两个具有相同内容的字符串用@code{equal}比较相等。}
(member "foo" '("foo" "bar"))
     @result{} ("foo" "bar")
@end group
@end example
@end defun

@defun delete object sequence
If @code{sequence} is a list, this function destructively removes all
elements @code{equal} to @var{object} from @var{sequence}.  For lists,
@code{delete} is to @code{delq} as @code{member} is to @code{memq}: it
uses @code{equal} to compare elements with @var{object}, like
@code{member}; when it finds an element that matches, it cuts the
element out just as @code{delq} would.

If @code{sequence} is a vector or string, @code{delete} returns a copy
of @code{sequence} with all elements @code{equal} to @code{object}
removed.

For example:

@example
@group
(setq l '((2) (1) (2)))
(delete '(2) l)
     @result{} ((1))
l
     @result{} ((2) (1))
;; @r{If you want to change @code{l} reliably,}
;; @r{write @code{(setq l (delete elt l))}.}
@end group
@group
(setq l '((2) (1) (2)))
(delete '(1) l)
     @result{} ((2) (2))
l
     @result{} ((2) (2))
;; @r{In this case, it makes no difference whether you set @code{l},}
;; @r{but you should do so for the sake of the other case.}
@end group
@group
(delete '(2) [(2) (1) (2)])
     @result{} [(1)]
@end group
@end example
@end defun

@defun remove object sequence
This function is the non-destructive counterpart of @code{delete}.  It
returns a copy of @code{sequence}, a list, vector, or string, with
elements @code{equal} to @code{object} removed.  For example:

@example
@group
(remove '(2) '((2) (1) (2)))
     @result{} ((1))
@end group
@group
(remove '(2) [(2) (1) (2)])
     @result{} [(1)]
@end group
@end example
@end defun

@quotation
@b{Common Lisp note:} The functions @code{member}, @code{delete} and
@code{remove} in GNU Emacs Lisp are derived from Maclisp, not Common
Lisp.  The Common Lisp versions do not use @code{equal} to compare
elements.
@end quotation

@defun member-ignore-case object list
This function is like @code{member}, except that @var{object} should
be a string and that it ignores differences in letter-case and text
representation: upper-case and lower-case letters are treated as
equal, and unibyte strings are converted to multibyte prior to
comparison.
@end defun

@defun delete-dups list
This function destructively removes all @code{equal} duplicates from
@var{list}, stores the result in @var{list} and returns it.  Of
several @code{equal} occurrences of an element in @var{list},
@code{delete-dups} keeps the first one.
@end defun

  See also the function @code{add-to-list}, in @ref{List Variables},
for a way to add an element to a list stored in a variable and used as a
set.

@node Association Lists
@section Association Lists
@cindex association list
@cindex alist

  An @dfn{association list}, or @dfn{alist} for short, records a mapping
from keys to values.  It is a list of cons cells called
@dfn{associations}: the @sc{car} of each cons cell is the @dfn{key}, and the
@sc{cdr} is the @dfn{associated value}.@footnote{This usage of ``key''
is not related to the term ``key sequence''; it means a value used to
look up an item in a table.  In this case, the table is the alist, and
the alist associations are the items.}

  Here is an example of an alist.  The key @code{pine} is associated with
the value @code{cones}; the key @code{oak} is associated with
@code{acorns}; and the key @code{maple} is associated with @code{seeds}.

@example
@group
((pine . cones)
 (oak . acorns)
 (maple . seeds))
@end group
@end example

  Both the values and the keys in an alist may be any Lisp objects.
For example, in the following alist, the symbol @code{a} is
associated with the number @code{1}, and the string @code{"b"} is
associated with the @emph{list} @code{(2 3)}, which is the @sc{cdr} of
the alist element:

@example
((a . 1) ("b" 2 3))
@end example

  Sometimes it is better to design an alist to store the associated
value in the @sc{car} of the @sc{cdr} of the element.  Here is an
example of such an alist:

@example
((rose red) (lily white) (buttercup yellow))
@end example

@noindent
Here we regard @code{red} as the value associated with @code{rose}.  One
advantage of this kind of alist is that you can store other related
information---even a list of other items---in the @sc{cdr} of the
@sc{cdr}.  One disadvantage is that you cannot use @code{rassq} (see
below) to find the element containing a given value.  When neither of
these considerations is important, the choice is a matter of taste, as
long as you are consistent about it for any given alist.

  The same alist shown above could be regarded as having the
associated value in the @sc{cdr} of the element; the value associated
with @code{rose} would be the list @code{(red)}.

  Association lists are often used to record information that you might
otherwise keep on a stack, since new associations may be added easily to
the front of the list.  When searching an association list for an
association with a given key, the first one found is returned, if there
is more than one.

  In Emacs Lisp, it is @emph{not} an error if an element of an
association list is not a cons cell.  The alist search functions simply
ignore such elements.  Many other versions of Lisp signal errors in such
cases.

  Note that property lists are similar to association lists in several
respects.  A property list behaves like an association list in which
each key can occur only once.  @xref{Property Lists}, for a comparison
of property lists and association lists.

@defun assoc key alist
This function returns the first association for @var{key} in
@var{alist}, comparing @var{key} against the alist elements using
@code{equal} (@pxref{相等判定}).  It returns @code{nil} if no
association in @var{alist} has a @sc{car} @code{equal} to @var{key}.
For example:

@smallexample
(setq trees '((pine . cones) (oak . acorns) (maple . seeds)))
     @result{} ((pine . cones) (oak . acorns) (maple . seeds))
(assoc 'oak trees)
     @result{} (oak . acorns)
(cdr (assoc 'oak trees))
     @result{} acorns
(assoc 'birch trees)
     @result{} nil
@end smallexample

Here is another example, in which the keys and values are not symbols:

@smallexample
(setq needles-per-cluster
      '((2 "Austrian Pine" "Red Pine")
        (3 "Pitch Pine")
        (5 "White Pine")))

(cdr (assoc 3 needles-per-cluster))
     @result{} ("Pitch Pine")
(cdr (assoc 2 needles-per-cluster))
     @result{} ("Austrian Pine" "Red Pine")
@end smallexample
@end defun

  The function @code{assoc-string} is much like @code{assoc} except
that it ignores certain differences between strings.  @xref{文本比较}.

@defun rassoc value alist
This function returns the first association with value @var{value} in
@var{alist}.  It returns @code{nil} if no association in @var{alist} has
a @sc{cdr} @code{equal} to @var{value}.

@code{rassoc} is like @code{assoc} except that it compares the @sc{cdr} of
each @var{alist} association instead of the @sc{car}.  You can think of
this as ``reverse @code{assoc},'' finding the key for a given value.
@end defun

@defun assq key alist
This function is like @code{assoc} in that it returns the first
association for @var{key} in @var{alist}, but it makes the comparison
using @code{eq} instead of @code{equal}.  @code{assq} returns @code{nil}
if no association in @var{alist} has a @sc{car} @code{eq} to @var{key}.
This function is used more often than @code{assoc}, since @code{eq} is
faster than @code{equal} and most alists use symbols as keys.
@xref{相等判定}.

@smallexample
(setq trees '((pine . cones) (oak . acorns) (maple . seeds)))
     @result{} ((pine . cones) (oak . acorns) (maple . seeds))
(assq 'pine trees)
     @result{} (pine . cones)
@end smallexample

On the other hand, @code{assq} is not usually useful in alists where the
keys may not be symbols:

@smallexample
(setq leaves
      '(("simple leaves" . oak)
        ("compound leaves" . horsechestnut)))

(assq "simple leaves" leaves)
     @result{} nil
(assoc "simple leaves" leaves)
     @result{} ("simple leaves" . oak)
@end smallexample
@end defun

@defun rassq value alist
This function returns the first association with value @var{value} in
@var{alist}.  It returns @code{nil} if no association in @var{alist} has
a @sc{cdr} @code{eq} to @var{value}.

@code{rassq} is like @code{assq} except that it compares the @sc{cdr} of
each @var{alist} association instead of the @sc{car}.  You can think of
this as ``reverse @code{assq},'' finding the key for a given value.

For example:

@smallexample
(setq trees '((pine . cones) (oak . acorns) (maple . seeds)))

(rassq 'acorns trees)
     @result{} (oak . acorns)
(rassq 'spores trees)
     @result{} nil
@end smallexample

@code{rassq} cannot search for a value stored in the @sc{car}
of the @sc{cdr} of an element:

@smallexample
(setq colors '((rose red) (lily white) (buttercup yellow)))

(rassq 'white colors)
     @result{} nil
@end smallexample

In this case, the @sc{cdr} of the association @code{(lily white)} is not
the symbol @code{white}, but rather the list @code{(white)}.  This
becomes clearer if the association is written in dotted pair notation:

@smallexample
(lily white) @equiv{} (lily . (white))
@end smallexample
@end defun

@defun assoc-default key alist &optional test default
This function searches @var{alist} for a match for @var{key}.  For each
element of @var{alist}, it compares the element (if it is an atom) or
the element's @sc{car} (if it is a cons) against @var{key}, by calling
@var{test} with two arguments: the element or its @sc{car}, and
@var{key}.  The arguments are passed in that order so that you can get
useful results using @code{string-match} with an alist that contains
regular expressions (@pxref{Regexp Search}).  If @var{test} is omitted
or @code{nil}, @code{equal} is used for comparison.

If an alist element matches @var{key} by this criterion,
then @code{assoc-default} returns a value based on this element.
If the element is a cons, then the value is the element's @sc{cdr}.
Otherwise, the return value is @var{default}.

If no alist element matches @var{key}, @code{assoc-default} returns
@code{nil}.
@end defun

@defun copy-alist alist
@cindex copying alists
This function returns a two-level deep copy of @var{alist}: it creates a
new copy of each association, so that you can alter the associations of
the new alist without changing the old one.

@smallexample
@group
(setq needles-per-cluster
      '((2 . ("Austrian Pine" "Red Pine"))
        (3 . ("Pitch Pine"))
@end group
        (5 . ("White Pine"))))
@result{}
((2 "Austrian Pine" "Red Pine")
 (3 "Pitch Pine")
 (5 "White Pine"))

(setq copy (copy-alist needles-per-cluster))
@result{}
((2 "Austrian Pine" "Red Pine")
 (3 "Pitch Pine")
 (5 "White Pine"))

(eq needles-per-cluster copy)
     @result{} nil
(equal needles-per-cluster copy)
     @result{} t
(eq (car needles-per-cluster) (car copy))
     @result{} nil
(cdr (car (cdr needles-per-cluster)))
     @result{} ("Pitch Pine")
@group
(eq (cdr (car (cdr needles-per-cluster)))
    (cdr (car (cdr copy))))
     @result{} t
@end group
@end smallexample

  This example shows how @code{copy-alist} makes it possible to change
the associations of one copy without affecting the other:

@smallexample
@group
(setcdr (assq 3 copy) '("Martian Vacuum Pine"))
(cdr (assq 3 needles-per-cluster))
     @result{} ("Pitch Pine")
@end group
@end smallexample
@end defun

@defun assq-delete-all key alist
This function deletes from @var{alist} all the elements whose @sc{car}
is @code{eq} to @var{key}, much as if you used @code{delq} to delete
each such element one by one.  It returns the shortened alist, and
often modifies the original list structure of @var{alist}.  For
correct results, use the return value of @code{assq-delete-all} rather
than looking at the saved value of @var{alist}.

@example
(setq alist '((foo 1) (bar 2) (foo 3) (lose 4)))
     @result{} ((foo 1) (bar 2) (foo 3) (lose 4))
(assq-delete-all 'foo alist)
     @result{} ((bar 2) (lose 4))
alist
     @result{} ((foo 1) (bar 2) (lose 4))
@end example
@end defun

@defun rassq-delete-all value alist
This function deletes from @var{alist} all the elements whose @sc{cdr}
is @code{eq} to @var{value}.  It returns the shortened alist, and
often modifies the original list structure of @var{alist}.
@code{rassq-delete-all} is like @code{assq-delete-all} except that it
compares the @sc{cdr} of each @var{alist} association instead of the
@sc{car}.
@end defun

@node Rings
@section Managing a Fixed-Size Ring of Objects

@cindex ring data structure
  This section describes functions for operating on rings.  A
@dfn{ring} is a fixed-size data structure that supports insertion,
deletion, rotation, and modulo-indexed reference and traversal.

@defun make-ring size
This returns a new ring capable of holding @var{size} objects.
@var{size} should be an integer.
@end defun

@defun ring-p object
This returns @code{t} if @var{object} is a ring, @code{nil} otherwise.
@end defun

@defun ring-size ring
This returns the maximum capacity of the @var{ring}.
@end defun

@defun ring-length ring
This returns the number of objects that @var{ring} currently contains.
The value will never exceed that returned by @code{ring-size}.
@end defun

@defun ring-elements ring
This returns a list of the objects in @var{ring}, in order, newest first.
@end defun

@defun ring-copy ring
This returns a new ring which is a copy of @var{ring}.
The new ring contains the same (@code{eq}) objects as @var{ring}.
@end defun

@defun ring-empty-p ring
This returns @code{t} if @var{ring} is empty, @code{nil} otherwise.
@end defun

  The newest element in the ring always has index 0.  Higher indices
correspond to older elements.  Indices are computed modulo the ring
length.  Index @minus{}1 corresponds to the oldest element, @minus{}2
to the next-oldest, and so forth.

@defun ring-ref ring index
This returns the object in @var{ring} found at index @var{index}.
@var{index} may be negative or greater than the ring length.  If
@var{ring} is empty, @code{ring-ref} signals an error.
@end defun

@defun ring-insert ring object
This inserts @var{object} into @var{ring}, making it the newest
element, and returns @var{object}.

If the ring is full, insertion removes the oldest element to
make room for the new element.
@end defun

@defun ring-remove ring &optional index
Remove an object from @var{ring}, and return that object.  The
argument @var{index} specifies which item to remove; if it is
@code{nil}, that means to remove the oldest item.  If @var{ring} is
empty, @code{ring-remove} signals an error.
@end defun

@defun ring-insert-at-beginning ring object
This inserts @var{object} into @var{ring}, treating it as the oldest
element.  The return value is not significant.

If the ring is full, this function removes the newest element to make
room for the inserted element.
@end defun

@cindex fifo data structure
  If you are careful not to exceed the ring size, you can
use the ring as a first-in-first-out queue.  For example:

@lisp
(let ((fifo (make-ring 5)))
  (mapc (lambda (obj) (ring-insert fifo obj))
        '(0 one "two"))
  (list (ring-remove fifo) t
        (ring-remove fifo) t
        (ring-remove fifo)))
     @result{} (0 t one t "two")
@end lisp

@ignore
   arch-tag: 31fb8a4e-4aa8-4a74-a206-aa00451394d4
@end ignore
